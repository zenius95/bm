// utils/browserManager.js
const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
const AdblockerPlugin = require('puppeteer-extra-plugin-adblocker');
const settingsService = require('./settingsService');
const Proxy = require('../models/Proxy'); // Import model Proxy

puppeteer.use(StealthPlugin());
puppeteer.use(AdblockerPlugin({ blockTrackers: true }));

const browserPool = [];
const requestQueue = [];

/**
 * Checks if a single proxy works by launching a temporary, lightweight browser.
 * @param {string} proxyString - The proxy URL (e.g., http://user:pass@host:port).
 * @returns {Promise<boolean>}
 */
async function checkProxyWithBrowser(proxyString) {
    if (!proxyString) return false;
    let browser = null;
    try {
        const launchArgs = [
            '--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage',
            '--disable-gpu', '--mute-audio', '--no-pings'
        ];
        const proxyUrl = new URL(proxyString);
        launchArgs.push(`--proxy-server=${proxyUrl.hostname}:${proxyUrl.port}`);
        
        let proxyAuth = null;
        if (proxyUrl.username && proxyUrl.password) {
            proxyAuth = { username: proxyUrl.username, password: proxyUrl.password };
        }
        
        browser = await puppeteer.launch({ headless: 'new', args: launchArgs, timeout: 20000 });
        const page = await browser.newPage();
        if (proxyAuth) await page.authenticate(proxyAuth);
        await page.goto('https://api.ipify.org', { waitUntil: 'domcontentloaded', timeout: 15000 });
        return true;
    } catch (error) {
        return false; 
    } finally {
        if (browser) await browser.close();
    }
}

/**
 * Soft-deletes a failed proxy from the database.
 * @param {object} proxy - The proxy object from the database.
 */
async function _handleFailedProxy(proxy) {
    // if (!proxy || !proxy._id) return;
    // console.log(`[BrowserManager] üóëÔ∏è Proxy ${proxy.host}:${proxy.port} ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o th√πng r√°c do kh√¥ng ho·∫°t ƒë·ªông.`);
    // try {
    //     await Proxy.findByIdAndUpdate(proxy._id, { isDeleted: true });
    // } catch (dbError) {
    //     console.error(`[BrowserManager] L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i proxy ${proxy.host}: ${dbError.message}`);
    // }
}

/**
 * The core logic for launching a browser instance.
 * @param {number} browserId - The ID for the browser.
 * @param {string|null} proxyString - The full proxy string to use, or null.
 * @returns {Promise<object|null>}
 */
async function _launchBrowser(browserId, proxyString) {
    console.log(`[BrowserManager] üöÄ (ID #${browserId}) ƒêang kh·ªüi ch·∫°y tr√¨nh duy·ªát...`);
    if(proxyString) console.log(`   ‚îî‚îÄ‚îÄ> S·ª≠ d·ª•ng proxy: ${proxyString.split('@').pop()}`); // Hide credentials in log
    
    try {
        const browserConfig = settingsService.get('browserManager');
        const launchArgs = [
            '--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas', '--no-first-run', '--no-zygote',
            '--disable-gpu', '--mute-audio', '--no-pings'
        ];
        
        let proxyAuth = null;
        if (proxyString) {
            const proxyUrl = new URL(proxyString);
            launchArgs.push(`--proxy-server=${proxyUrl.hostname}:${proxyUrl.port}`);
            if (proxyUrl.username && proxyUrl.password) {
                proxyAuth = { username: proxyUrl.username, password: proxyUrl.password };
            }
        }

        const browser = await puppeteer.launch({ headless: 'new', args: launchArgs, timeout: 60000 });
        const pagePool = [];
        const MAX_PAGES_PER_BROWSER = browserConfig.maxPagesPerBrowser || 5;
        for (let j = 0; j < MAX_PAGES_PER_BROWSER; j++) {
            const page = await browser.newPage();
            if (proxyAuth) await page.authenticate(proxyAuth);
            await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            await page.setViewport({ width: 1366, height: 768 });
            pagePool.push(page);
        }

        const browserPoolItem = { browser, pagePool, id: browserId, usedProxy: proxyString };
        browser.on('disconnected', () => {
            console.log(`[BrowserManager] üî¥ Tr√¨nh duy·ªát #${browserId} ƒë√£ b·ªã ng·∫Øt k·∫øt n·ªëi.`);
            const index = browserPool.findIndex(b => b.id === browserId);
            if (index > -1) browserPool.splice(index, 1);
            const RESPAWN_DELAY_MS = settingsService.get('browserManager').respawnDelayMs || 5000;
            console.log(`[BrowserManager] üîÑ S·∫Ω kh·ªüi ƒë·ªông l·∫°i tr√¨nh duy·ªát #${browserId} sau ${RESPAWN_DELAY_MS / 1000} gi√¢y...`);
            setTimeout(() => respawnBrowser(browserId), RESPAWN_DELAY_MS);
        });
        
        console.log(`[BrowserManager] ‚úÖ Tr√¨nh duy·ªát #${browserId} ƒë√£ s·∫µn s√†ng.`);
        return browserPoolItem;
    } catch (error) {
        console.error(`[BrowserManager] ‚ùå L·ªói nghi√™m tr·ªçng khi kh·ªüi ch·∫°y tr√¨nh duy·ªát #${browserId}: ${error.message}`);
        return null;
    }
}

async function createBrowserInstance(browserId) {
    const browserConfig = settingsService.get('browserManager');
    
    if (!browserConfig.useProxies) {
        return _launchBrowser(browserId, null);
    }

    const availableProxies = await Proxy.find({ isDeleted: false, status: 'LIVE' }).lean();
    if (availableProxies.length === 0) {
        console.warn(`[BrowserManager] ‚ö†Ô∏è (ID #${browserId}) ƒê√£ b·∫≠t s·ª≠ d·ª•ng proxy nh∆∞ng kh√¥ng t√¨m th·∫•y proxy LIVE n√†o. Kh·ªüi ch·∫°y kh√¥ng proxy.`);
        return _launchBrowser(browserId, null);
    }

    console.log(`[BrowserManager] T√¨m th·∫•y ${availableProxies.length} proxy kh·∫£ d·ª•ng. B·∫Øt ƒë·∫ßu ki·ªÉm tra v√† kh·ªüi ch·∫°y cho tr√¨nh duy·ªát #${browserId}...`);

    for (const proxy of availableProxies) {
        const proxyString = `http://${proxy.username}:${proxy.password}@${proxy.host}:${proxy.port}`;
        console.log(`[BrowserManager] üîç ƒêang ki·ªÉm tra proxy: ${proxy.host}:${proxy.port}...`);
        
        const isProxyWorking = await checkProxyWithBrowser(proxyString);

        if (isProxyWorking) {
            return _launchBrowser(browserId, proxyString);
        } else {
            await _handleFailedProxy(proxy);
        }
    }
    
    console.error(`[BrowserManager] ‚ùå ƒê√£ ki·ªÉm tra t·∫•t c·∫£ ${availableProxies.length} proxy nh∆∞ng kh√¥ng c√≥ proxy n√†o ho·∫°t ƒë·ªông. Kh√¥ng th·ªÉ kh·ªüi ch·∫°y tr√¨nh duy·ªát #${browserId} v·ªõi proxy.`);
    return null;
}

async function respawnBrowser(browserId) {
    const RESPAWN_DELAY_MS = settingsService.get('browserManager').respawnDelayMs || 5000;
    try {
        const newBrowserInstance = await createBrowserInstance(browserId);
        if (newBrowserInstance) {
            browserPool.push(newBrowserInstance);
            console.log(`[BrowserManager] ‚úÖ ƒê√£ h·ªìi sinh th√†nh c√¥ng tr√¨nh duy·ªát #${browserId}. T·ªïng s·ªë tr√¨nh duy·ªát hi·ªán t·∫°i: ${browserPool.length}`);
        } else {
             console.error(`[BrowserManager] ‚ùå H·ªìi sinh tr√¨nh duy·ªát #${browserId} th·∫•t b·∫°i ho√†n to√†n. S·∫Ω kh√¥ng th·ª≠ l·∫°i cho ƒë·∫øn khi server kh·ªüi ƒë·ªông l·∫°i.`);
        }
    } catch (error) {
        console.error(`[BrowserManager] ‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi h·ªìi sinh tr√¨nh duy·ªát #${browserId}. Th·ª≠ l·∫°i sau ${RESPAWN_DELAY_MS / 1000} gi√¢y.`);
        setTimeout(() => respawnBrowser(browserId), RESPAWN_DELAY_MS);
    }
}

const launchBrowsers = async () => {
    if (browserPool.length > 0) return;
    
    const MAX_BROWSERS = settingsService.get('browserManager').maxBrowsers || 2;
    console.log(`[BrowserManager] üöÄ Kh·ªüi ch·∫°y ban ƒë·∫ßu ${MAX_BROWSERS} tr√¨nh duy·ªát...`);
    const launchPromises = [];
    for (let i = 1; i <= MAX_BROWSERS; i++) {
        launchPromises.push(createBrowserInstance(i));
    }
    const resolvedBrowsers = await Promise.all(launchPromises);
    browserPool.push(...resolvedBrowsers.filter(Boolean));
};

// ... (C√°c h√†m acquirePage, releasePage, closeBrowser kh√¥ng thay ƒë·ªïi)
const acquirePage = () => {
    return new Promise(async (resolve) => {
        await launchBrowsers();
        
        const availableBrowserPool = browserPool.find(pool => pool.pagePool.length > 0);

        if (availableBrowserPool) {
            const page = availableBrowserPool.pagePool.pop();
            page.browserId = availableBrowserPool.id;
            console.log(`[BrowserManager] C·∫•p ph√°t tab t·ª´ Tr√¨nh duy·ªát #${page.browserId}. Tab c√≤n l·∫°i trong h·ªì b∆°i n√†y: ${availableBrowserPool.pagePool.length}`);
            resolve(page);
        } else {
            console.log(`[BrowserManager] H·∫øt tab r·∫£nh. X·∫øp h√†ng y√™u c·∫ßu. H√†ng ƒë·ª£i: ${requestQueue.length + 1}`);
            requestQueue.push(resolve);
        }
    });
};

const releasePage = (page) => {
    return new Promise((resolve) => {
        const ownerBrowserPool = browserPool.find(pool => pool.id === page.browserId);

        if (!ownerBrowserPool) {
            console.error(`[BrowserManager] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tr√¨nh duy·ªát g·ªëc #${page.browserId} ƒë·ªÉ tr·∫£ tab. Tab s·∫Ω b·ªã h·ªßy.`);
            page.close().catch(err => console.error(`L·ªói khi c·ªë g·∫Øng ƒë√≥ng tab m·ªì c√¥i: ${err.message}`));
            return resolve();
        }

        if (requestQueue.length > 0) {
            const nextResolve = requestQueue.shift();
            console.log(`[BrowserManager] Tr·∫£ tab t·ª´ tr√¨nh duy·ªát #${page.browserId} v√† c·∫•p ph√°t ngay cho y√™u c·∫ßu ƒëang ƒë·ª£i. H√†ng ƒë·ª£i c√≤n: ${requestQueue.length}`);
            nextResolve(page);
        } else {
            ownerBrowserPool.pagePool.push(page);
            console.log(`[BrowserManager] Tr·∫£ tab v·ªÅ h·ªì b∆°i c·ªßa tr√¨nh duy·ªát #${page.browserId}. Tab c√≤n l·∫°i: ${ownerBrowserPool.pagePool.length}`);
        }
        resolve();
    });
};

const closeBrowser = async () => {
    console.log('[BrowserManager] üëã ƒêang ƒë√≥ng t·∫•t c·∫£ c√°c tr√¨nh duy·ªát...');
    const closePromises = browserPool.map(pool => pool.browser.close());
    await Promise.all(closePromises);
    browserPool.length = 0;
    console.log('[BrowserManager] ‚úÖ T·∫•t c·∫£ tr√¨nh duy·ªát ƒë√£ ƒë∆∞·ª£c ƒë√≥ng.');
};


module.exports = {
    launchBrowser: launchBrowsers,
    acquirePage,
    releasePage,
    closeBrowser,
};