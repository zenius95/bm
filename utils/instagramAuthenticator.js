// Bro, import m·∫•y th·ª© c·∫ßn thi·∫øt v√†o nh√©
const fetch = require('node-fetch');
const twofactor = require('node-2fa');
const { HttpsProxyAgent } = require('https-proxy-agent'); // D√πng https-proxy-agent ƒë·ªÉ h·ªó tr·ª£ proxy t·ªët h∆°n

// --- ƒê·ªãnh nghƒ©a c√°c URL v√† Header tƒ©nh ---
// ƒê·ªÉ ·ªü ƒë√¢y cho d·ªÖ qu·∫£n l√Ω, sau n√†y IG c√≥ ƒë·ªïi th√¨ s·ª≠a 1 ch·ªó th√¥i
const INSTAGRAM_URLS = {
    BASE: 'https://www.instagram.com/',
    LOGIN_AJAX: 'https://www.instagram.com/api/v1/web/accounts/login/ajax/',
    TWO_FACTOR_AJAX: 'https://www.instagram.com/api/v1/web/accounts/login/ajax/two_factor/',
    SHARED_DATA: 'https://www.instagram.com/data/shared_data/',
};

const BASE_HEADERS = {
    'accept': '*/*',
    'accept-language': 'en-US,en;q=0.9',
    'dpr': '1',
    'sec-ch-prefers-color-scheme': 'dark',
    'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': '"Windows"',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'same-origin',
    'x-asbd-id': '129477',
    'x-ig-app-id': '936619743392459',
    'x-ig-www-claim': '0',
    'x-requested-with': 'XMLHttpRequest',
};

// --- C√°c l·ªõp Error t√πy ch·ªânh ƒë·ªÉ b·∫Øt l·ªói cho chu·∫©n ---
class InstagramError extends Error {
    constructor(message) {
        super(message);
        this.name = this.constructor.name;
    }
}
class ScrapingError extends InstagramError { constructor() { super("Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu c·∫ßn thi·∫øt (CSRF token, machine ID) t·ª´ trang ch·ªß Instagram."); } }
class InvalidCredentialsError extends InstagramError { constructor(message) { super(message || "Sai t√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u."); } }
class CheckpointError extends InstagramError { constructor(url) { super("T√†i kho·∫£n y√™u c·∫ßu x√°c th·ª±c (checkpoint)."); this.checkpointUrl = url; } }
class TwoFactorError extends InstagramError { constructor(message) { super(message || "X√°c th·ª±c hai y·∫øu t·ªë th·∫•t b·∫°i."); } }
class LoginRequiredError extends InstagramError { constructor() { super("Y√™u c·∫ßu ƒëƒÉng nh·∫≠p, cookie c√≥ th·ªÉ ƒë√£ h·∫øt h·∫°n."); } }

/**
 * Class chuy√™n x·ª≠ l√Ω vi·ªác ƒëƒÉng nh·∫≠p v√†o Instagram.
 * T·ªëi ∆∞u, d·ªÖ ƒë·ªçc v√† x·ª≠ l√Ω l·ªói r√µ r√†ng.
 */
class InstagramAuthenticator {
    #auth;
    #proxyAgent;
    #session = {
        userAgent: '',
        csrfToken: '',
        machineId: '',
        cookies: '',
    };

    /**
     * @param {object} auth - Th√¥ng tin x√°c th·ª±c
     * @param {string} auth.username - T√™n ng∆∞·ªùi d√πng
     * @param {string} auth.password - M·∫≠t kh·∫©u
     * @param {string} [auth.twofa] - M√£ b√≠ m·∫≠t 2FA (n·∫øu c√≥)
     * @param {string} [auth.proxy] - Chu·ªói proxy (v√≠ d·ª•: http://user:pass@host:port)
     * @param {string} [auth.userAgent] - User-Agent t√πy ch·ªânh
     */
    constructor(auth) {
        this.#auth = auth;
        this.#session.userAgent = auth.userAgent || "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36";
        this.#proxyAgent = auth.proxy ? new HttpsProxyAgent(auth.proxy) : undefined;
    }

    /**
     * Tr√≠ch xu·∫•t v√† ƒë·ªãnh d·∫°ng cookie t·ª´ response c·ªßa fetch.
     * @private
     */
    #getCookies(res) {
        const rawCookies = res.headers.raw()['set-cookie'];
        if (!rawCookies) return '';
        return rawCookies.map(entry => entry.split(';')[0]).join('; ');
    }

    /**
     * C·∫≠p nh·∫≠t cookie cho session hi·ªán t·∫°i.
     * @private
     */
    #updateCookies(res) {
        const newCookies = this.#getCookies(res);
        if (newCookies) {
            // Logic ƒë·ªÉ h·ª£p nh·∫•t cookie c≈© v√† m·ªõi, tr√°nh tr√πng l·∫∑p key
            const cookieMap = new Map();
            [this.#session.cookies, newCookies].forEach(cookieString => {
                cookieString.split(';').forEach(cookiePair => {
                    const [key, value] = cookiePair.trim().split(/=(.*)/s);
                    if (key) cookieMap.set(key, value);
                });
            });
            this.#session.cookies = Array.from(cookieMap, ([key, value]) => `${key}=${value}`).join('; ');
        }
    }

    /**
     * G·ª≠i request ƒë·∫øn trang ch·ªß ƒë·ªÉ l·∫•y c√°c th√¥ng tin ban ƒë·∫ßu.
     * @private
     */
    async #fetchInitialData() {
        console.log("‚û°Ô∏è  ƒêang l·∫•y d·ªØ li·ªáu kh·ªüi t·∫°o (CSRF, Machine ID)...");
        try {
            const res = await fetch(INSTAGRAM_URLS.BASE, {
                headers: { ...BASE_HEADERS, 'user-agent': this.#session.userAgent },
                agent: this.#proxyAgent,
            });

            this.#updateCookies(res);
            const html = await res.text();
            
            this.#session.csrfToken = html.match(/"csrf_token":"([^"]+)"/)?.[1];
            this.#session.machineId = html.match(/"device_id":"([^"]+)"/)?.[1];
            
            if (!this.#session.csrfToken || !this.#session.machineId) {
                throw new Error(); // N√©m l·ªói ƒë·ªÉ catch b√™n d∆∞·ªõi x·ª≠ l√Ω
            }
            console.log("‚úÖ  L·∫•y d·ªØ li·ªáu kh·ªüi t·∫°o th√†nh c√¥ng!");
        } catch (error) {
            throw new ScrapingError();
        }
    }

    /**
     * X·ª≠ l√Ω b∆∞·ªõc x√°c th·ª±c 2 y·∫øu t·ªë (2FA).
     * @private
     */
    async #handleTwoFactor(twoFactorInfo) {
        console.log("üîê  Y√™u c·∫ßu x√°c th·ª±c hai y·∫øu t·ªë (2FA)...");
        if (!this.#auth.twofa) {
            throw new TwoFactorError("Thi·∫øu m√£ b√≠ m·∫≠t 2FA ƒë·ªÉ ti·∫øp t·ª•c.");
        }

        const { token } = twofactor.generateToken(this.#auth.twofa);
        if (!token) {
            throw new TwoFactorError("T·∫°o m√£ 2FA th·∫•t b·∫°i t·ª´ m√£ b√≠ m·∫≠t ƒë∆∞·ª£c cung c·∫•p.");
        }
        console.log(`üîë  ƒê√£ t·∫°o m√£ 2FA: ${token}`);

        const body = new URLSearchParams({
            username: this.#auth.username,
            identifier: twoFactorInfo.two_factor_identifier,
            verificationCode: token,
            queryParams: '{"next":"/"}',
        }).toString();

        const res = await fetch(INSTAGRAM_URLS.TWO_FACTOR_AJAX, {
            method: 'POST',
            headers: {
                ...BASE_HEADERS,
                'user-agent': this.#session.userAgent,
                'content-type': 'application/x-www-form-urlencoded',
                'x-csrftoken': this.#session.csrfToken,
                'x-web-device-id': this.#session.machineId,
                'cookie': this.#session.cookies,
            },
            agent: this.#proxyAgent,
            body,
        });

        this.#updateCookies(res);
        const data = await res.json();

        if (!data.authenticated) {
            throw new TwoFactorError(data.message || "X√°c th·ª±c 2FA th·∫•t b·∫°i.");
        }

        console.log("‚úÖ  X√°c th·ª±c 2FA th√†nh c√¥ng!");
    }

    /**
     * X√°c th·ª±c session b·∫±ng c√°ch ki·ªÉm tra d·ªØ li·ªáu ng∆∞·ªùi d√πng.
     * @private
     */
    async #verifySession() {
        console.log("üßê  ƒêang x√°c th·ª±c session...");
        const res = await fetch(INSTAGRAM_URLS.SHARED_DATA, {
            headers: {
                ...BASE_HEADERS,
                'user-agent': this.#session.userAgent,
                'cookie': this.#session.cookies,
            },
            agent: this.#proxyAgent,
        });

        const data = await res.json();
        
        if (data.config?.viewer) {
            console.log(`‚úÖ  X√°c th·ª±c th√†nh c√¥ng cho user: ${data.config.viewer.username}`);
            return data.config.viewer;
        }

        // C√°c tr∆∞·ªùng h·ª£p l·ªói kh√°c sau khi ƒë√£ login
        if (res.url.includes('/challenge/')) {
            throw new CheckpointError(res.url);
        }
        if (data.checkpoint_url?.includes('accounts/disabled')) {
            throw new InstagramError('T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a.');
        }

        throw new LoginRequiredError();
    }
    
    /**
     * H√†m ch√≠nh ƒë·ªÉ th·ª±c hi·ªán ƒëƒÉng nh·∫≠p b·∫±ng username v√† password.
     */
    async login() {
        try {
            await this.#fetchInitialData();

            console.log(`üöÄ  B·∫Øt ƒë·∫ßu ƒëƒÉng nh·∫≠p cho user: ${this.#auth.username}...`);
            
            const encryptedPassword = `#PWD_INSTAGRAM_BROWSER:0:${Math.floor(Date.now() / 1000)}:${this.#auth.password}`;
            const body = new URLSearchParams({
                enc_password: encryptedPassword,
                username: this.#auth.username,
                optIntoOneTap: 'false',
                queryParams: '{}',
            }).toString();

            const res = await fetch(INSTAGRAM_URLS.LOGIN_AJAX, {
                method: 'POST',
                headers: {
                    ...BASE_HEADERS,
                    'user-agent': this.#session.userAgent,
                    'content-type': 'application/x-www-form-urlencoded',
                    'x-csrftoken': this.#session.csrfToken,
                    'x-web-device-id': this.#session.machineId,
                    'cookie': this.#session.cookies,
                },
                agent: this.#proxyAgent,
                body,
            });

            this.#updateCookies(res);
            const data = await res.json();

            if (data.authenticated) {
                console.log("üéâ  ƒêƒÉng nh·∫≠p th√†nh c√¥ng (ch∆∞a qua 2FA)!");
            } else if (data.two_factor_required) {
                await this.#handleTwoFactor(data.two_factor_info);
            } else if (data.checkpoint_url) {
                throw new CheckpointError(data.checkpoint_url);
            } else if (data.error_type === 'UserInvalidCredentials') {
                 throw new InvalidCredentialsError("Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ƒë√∫ng.");
            } else {
                // C√°c l·ªói chung chung kh√°c
                throw new InstagramError(data.message || 'L·ªói ƒëƒÉng nh·∫≠p kh√¥ng x√°c ƒë·ªãnh.');
            }

            // Sau khi ƒëƒÉng nh·∫≠p ho·∫∑c 2FA th√†nh c√¥ng, x√°c th·ª±c l·∫°i session
            const userData = await this.#verifySession();

            return {
                success: true,
                userData,
                cookies: this.#session.cookies,
            };

        } catch (error) {
            console.error(`üí•  L·ªñI: ${error.message}`);
            // N√©m l·∫°i l·ªói ƒë·ªÉ code b√™n ngo√†i c√≥ th·ªÉ b·∫Øt v√† x·ª≠ l√Ω
            throw error;
        }
    }
}

module.exports = InstagramAuthenticator