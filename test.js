// test.js
const fetch = require('node-fetch'); // Thay axios b·∫±ng node-fetch

const API_BASE_URL = 'http://localhost:3000/api';
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function runTest() {
    console.log('üöÄ B·∫Øt ƒë·∫ßu k·ªãch b·∫£n test API v·ªõi node-fetch...');

    try {
        // --- B∆∞·ªõc 1: T·∫°o m·ªôt ƒë∆°n h√†ng m·ªõi ---
        console.log('\n--- [TEST 1] G·ª≠i y√™u c·∫ßu POST /orders ƒë·ªÉ t·∫°o ƒë∆°n h√†ng ---');
        const itemsToCreate = {
            itemsData: ["Ph√¢n t√≠ch d·ªØ li·ªáu A", "G·ª≠i email cho B", "T·∫°o b√°o c√°o C"]
        };

        const createResponse = await fetch(`${API_BASE_URL}/orders`, {
            method: 'POST',
            body: JSON.stringify(itemsToCreate),
            headers: { 'Content-Type': 'application/json' }
        });

        // node-fetch kh√¥ng throw error, ta ph·∫£i t·ª± ki·ªÉm tra status
        if (!createResponse.ok) { 
            const errorData = await createResponse.json();
            throw new Error(`T·∫°o ƒë∆°n h√†ng th·∫•t b·∫°i! Status: ${createResponse.status}, Message: ${errorData.message}`);
        }

        const createResult = await createResponse.json();
        const newOrder = createResult.order;
        const orderId = newOrder._id;

        console.log(`‚úÖ T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng! Order ID: ${orderId}`);
        console.log('Tr·∫°ng th√°i ban ƒë·∫ßu:', newOrder.status);


        // --- B∆∞·ªõc 2: Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng li√™n t·ª•c ---
        console.log(`\n--- [TEST 2] B·∫Øt ƒë·∫ßu ki·ªÉm tra tr·∫°ng th√°i c·ªßa Order ID: ${orderId} ---`);
        let currentOrder;
        let attempts = 0;
        const maxAttempts = 10;

        while (attempts < maxAttempts) {
            attempts++;
            console.log(`\nL·∫ßn ki·ªÉm tra th·ª© ${attempts}...`);

            const getResponse = await fetch(`${API_BASE_URL}/orders/${orderId}`);
            if (!getResponse.ok) {
                 throw new Error(`L·∫•y th√¥ng tin ƒë∆°n h√†ng th·∫•t b·∫°i! Status: ${getResponse.status}`);
            }

            currentOrder = await getResponse.json();

            console.log(`   - Tr·∫°ng th√°i Order: ${currentOrder.status}`);
            currentOrder.items.forEach(item => {
                console.log(`     - Item "${item.data}": ${item.status}`);
            });

            if (currentOrder.status === 'completed') {
                console.log('\n‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!');
                break;
            }

            if (attempts >= maxAttempts) {
                console.log('\n‚ùå Test th·∫•t b·∫°i: ƒê∆°n h√†ng kh√¥ng ho√†n th√†nh sau 10 l·∫ßn ki·ªÉm tra.');
                break;
            }
            
            await delay(2000);
        }

        // --- B∆∞·ªõc 3: Test c√°c tr∆∞·ªùng h·ª£p l·ªói (Bonus) ---
        console.log('\n--- [TEST 3] Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p l·ªói ---');

        // L·ªói: ID kh√¥ng h·ª£p l·ªá
        const invalidIdResponse = await fetch(`${API_BASE_URL}/orders/invalid-id`);
        if (invalidIdResponse.status === 400) {
            const errorData = await invalidIdResponse.json();
            console.log(`‚úÖ Test ID kh√¥ng h·ª£p l·ªá th√†nh c√¥ng! Status: 400, Message: "${errorData.message}"`);
        }

        // L·ªói: ID kh√¥ng t·ªìn t·∫°i
        const nonExistentId = '605a9b2b5f7e6a1b2c3d4e5f';
        const notFoundResponse = await fetch(`${API_BASE_URL}/orders/${nonExistentId}`);
        if (notFoundResponse.status === 404) {
             const errorData = await notFoundResponse.json();
            console.log(`‚úÖ Test ID kh√¥ng t·ªìn t·∫°i th√†nh c√¥ng! Status: 404, Message: "${errorData.message}"`);
        }

    } catch (error) {
        console.error('\n‚ùå ƒê√£ c√≥ l·ªói nghi√™m tr·ªçng x·∫£y ra trong qu√° tr√¨nh test!');
        console.error('   - L·ªói:', error.message);
    }

    console.log('\nüèÅ K·ªãch b·∫£n test ƒë√£ k·∫øt th√∫c.');
}

runTest();