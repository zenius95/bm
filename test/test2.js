// test/apiLoadTest.js
const fetch = require('node-fetch');

// --- C·∫§U H√åNH TEST ---
const API_BASE_URL = 'http://localhost:3000/api/phone'; // S·ª≠a l·∫°i port n·∫øu c·∫ßn
const MASTER_API_KEY = '2b26be39141b87dceccb22b003db6a177e260d353dcddf1e4d9b916b35eee130'; // API Key c·ªßa Bro
const SIMULATED_REQUESTS = 20; // Gi·∫£ l·∫≠p 20 y√™u c·∫ßu ƒë·ªìng th·ªùi
const SERVICE_TO_GET_CODE = 'instagram'; // D·ªãch v·ª• c·∫ßn l·∫•y code
const GET_CODE_TIMEOUT_MS = 45000; // Ch·ªù t·ªëi ƒëa 45 gi√¢y cho m·ªói y√™u c·∫ßu get-code

/**
 * H√†m th·ª±c hi·ªán m·ªôt quy tr√¨nh ho√†n ch·ªânh: l·∫•y s·ªë -> l·∫•y code -> h·ªßy s·ªë.
 * @param {number} requestIndex - S·ªë th·ª© t·ª± c·ªßa y√™u c·∫ßu ƒë·ªÉ ti·ªán theo d√µi
 */
async function runFullProcess(requestIndex) {
    console.log(`[Quy tr√¨nh #${requestIndex}] üü° B·∫Øt ƒë·∫ßu...`);
    const startTime = Date.now();
    let phoneNumberId = null;

    try {
        // --- B∆Ø·ªöC 1: L·∫§Y S·ªê ƒêI·ªÜN THO·∫†I ---
        const getNumberUrl = `${API_BASE_URL}/get-number?apiKey=${MASTER_API_KEY}&country=USA`;
        console.log(`[Quy tr√¨nh #${requestIndex}] üì≤ ƒêang g·ªçi API l·∫•y s·ªë...`);
        const numberRes = await fetch(getNumberUrl);
        const numberData = await numberRes.json();

        if (!numberRes.ok || !numberData.success) {
            throw new Error(`L·∫•y s·ªë th·∫•t b·∫°i: ${numberData.message || 'Kh√¥ng r√µ l·ªói'}`);
        }
        phoneNumberId = numberData.phone._id;
        console.log(`[Quy tr√¨nh #${requestIndex}] üìû L·∫•y ƒë∆∞·ª£c SƒêT ID: ${phoneNumberId}`);

        // --- B∆Ø·ªöC 2: L·∫§Y CODE ---
        const getCodeUrl = `${API_BASE_URL}/get-code?apiKey=${MASTER_API_KEY}&phoneNumberId=${phoneNumberId}&service=${SERVICE_TO_GET_CODE}`;
        console.log(`[Quy tr√¨nh #${requestIndex}] üí¨ ƒêang g·ªçi API l·∫•y code cho SƒêT ID: ${phoneNumberId}...`);
        
        const controller = new AbortController();
        const timeout = setTimeout(() => {
            controller.abort();
        }, GET_CODE_TIMEOUT_MS);

        const codeRes = await fetch(getCodeUrl, { signal: controller.signal });
        clearTimeout(timeout);
        
        const codeData = await codeRes.json();

        if (!codeRes.ok || !codeData.success) {
            // ƒê√¢y kh√¥ng h·∫≥n l√† l·ªói, c√≥ th·ªÉ do SƒêT ch∆∞a nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn
            console.log(`[Quy tr√¨nh #${requestIndex}] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y code cho SƒêT ID: ${phoneNumberId} (L√Ω do: ${codeData.message})`);
            return { success: false, reason: 'No code found' };
        }

        const duration = (Date.now() - startTime) / 1000;
        console.log(`[Quy tr√¨nh #${requestIndex}] ‚úÖ TH√ÄNH C√îNG sau ${duration.toFixed(2)}s. Code: ${codeData.code}`);
        return { success: true, duration };

    } catch (error) {
        if (error.name === 'AbortError') {
            console.error(`[Quy tr√¨nh #${requestIndex}] ‚ùå Th·∫•t b·∫°i do timeout sau ${GET_CODE_TIMEOUT_MS / 1000}s.`);
            return { success: false, reason: 'Timeout' };
        }
        const duration = (Date.now() - startTime) / 1000;
        console.error(`[Quy tr√¨nh #${requestIndex}] ‚ùå Th·∫•t b·∫°i sau ${duration.toFixed(2)}s. L·ªói: ${error.message}`);
        return { success: false, reason: error.message };
    } finally {
        // --- B∆Ø·ªöC 3: H·ª¶Y S·ªê (QUAN TR·ªåNG) ---
        if (phoneNumberId) {
            console.log(`[Quy tr√¨nh #${requestIndex}] ‚Ü©Ô∏è  ƒêang h·ªßy SƒêT ID: ${phoneNumberId}...`);
            const cancelUrl = `${API_BASE_URL}/cancel-number?apiKey=${MASTER_API_KEY}&phoneNumberId=${phoneNumberId}`;
            await fetch(cancelUrl).catch(err => console.error(`L·ªói khi h·ªßy s·ªë: ${err.message}`));
        }
    }
}

/**
 * Ch·∫°y b√†i test ch√≠nh
 */
async function runApiLoadTest() {
    console.log('--- B·∫ÆT ƒê·∫¶U TEST T·∫¢I CAO API TH·ª∞C T·∫æ ---');
    console.log(`Chu·∫©n b·ªã b·∫Øn ${SIMULATED_REQUESTS} quy tr√¨nh (l·∫•y s·ªë -> l·∫•y code) ƒë·ªìng th·ªùi...\n`);
    
    // ƒê·∫£m b·∫£o server c√≥ th·ªùi gian kh·ªüi ƒë·ªông tr√¨nh duy·ªát
    console.log("ƒêang ch·ªù 5 gi√¢y ƒë·ªÉ server kh·ªüi ƒë·ªông tr√¨nh duy·ªát...");
    await new Promise(resolve => setTimeout(resolve, 5000));

    const requestPromises = [];
    for (let i = 1; i <= SIMULATED_REQUESTS; i++) {
        requestPromises.push(runFullProcess(i));
    }

    // Ch·ªù t·∫•t c·∫£ c√°c quy tr√¨nh ho√†n th√†nh
    const results = await Promise.all(requestPromises);

    console.log('\n--- TEST HO√ÄN T·∫§T ---');
    const successCount = results.filter(r => r.success).length;
    const failedCount = results.length - successCount;
    const successfulDurations = results.filter(r => r.success).map(r => r.duration);
    const avgDuration = successfulDurations.length > 0 
        ? successfulDurations.reduce((sum, d) => sum + d, 0) / successfulDurations.length
        : 0;

    console.log(`T·ªïng k·∫øt:`);
    console.log(`  - ‚úÖ Th√†nh c√¥ng: ${successCount}/${SIMULATED_REQUESTS}`);
    console.log(`  - ‚ùå Th·∫•t b·∫°i/Kh√¥ng c√≥ code: ${failedCount}/${SIMULATED_REQUESTS}`);
    if (avgDuration > 0) {
        console.log(`  - ‚è±Ô∏è  Th·ªùi gian x·ª≠ l√Ω trung b√¨nh (cho c√°c l·∫ßn th√†nh c√¥ng): ${avgDuration.toFixed(2)} gi√¢y/y√™u c·∫ßu.`);
    }
    
    process.exit(0);
}

runApiLoadTest();