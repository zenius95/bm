<%# Remove full-page structure and styles that are in the main layout %>

<style>
    /* Aurora Background - specific to this page for a unique feel */
    .aurora-bg {
        position: fixed;
        inset: 0;
        z-index: -1; /* Behind the sidebar and main content */
        overflow: hidden;
        background-color: #020617;
    }
    .aurora-bg::before, .aurora-bg::after {
        content: '';
        position: absolute;
        width: 50vw;
        height: 50vw;
        border-radius: 50%;
        opacity: 0.15;
        filter: blur(100px);
        will-change: transform;
    }
    .aurora-bg::before {
        background: radial-gradient(circle, #8b5cf6, transparent 60%); /* Purple */
        top: -10%; left: 15%; /* Adjusted to be within the main content area */
        animation: moveAurora1 25s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }
    .aurora-bg::after {
        background: radial-gradient(circle, #3b82f6, transparent 60%); /* Blue */
        bottom: -10%; right: -10%;
        animation: moveAurora2 25s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }
    @keyframes moveAurora1 {
        0%, 100% { transform: translate(0, 0) scale(1); }
        25% { transform: translate(20%, 10%) scale(1.2); }
        50% { transform: translate(5%, -15%) scale(0.9); }
        75% { transform: translate(-15%, 5%) scale(1.1); }
    }
    @keyframes moveAurora2 {
        0%, 100% { transform: translate(0, 0) scale(1); }
        25% { transform: translate(-20%, -10%) scale(0.8); }
        50% { transform: translate(-5%, 15%) scale(1.1); }
        75% { transform: translate(15%, -5%) scale(1); }
    }
    .form-input {
        '@apply w-full bg-slate-800/50 border border-slate-700 rounded-lg p-3 text-sm text-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 shadow-sm placeholder:text-slate-500': {};
    }
</style>

<div class="aurora-bg"></div>

<div class="space-y-10">
    <!-- Header -->
    <header class="text-center">
        <h1 class="text-3xl lg:text-4xl font-bold text-white">Tạo Đơn Hàng Mới</h1>
        <p class="mt-2 text-slate-400 max-w-2xl mx-auto">Nền tảng tự động hoá quy trình, giúp bạn tiết kiệm thời gian và tối ưu chi phí.</p>
    </header>
    
    <% if (error) { %>
        <div class="max-w-4xl mx-auto bg-red-900/50 border border-red-500/30 text-red-300 px-4 py-3 rounded-lg text-sm">
            <%= error %>
        </div>
    <% } %>

    <!-- Pricing Card -->

    <div id="pricing-tiers-container" class="grid grid-cols-1 sm:grid-cols-7 gap-4">
        <!-- JS will populate pricing cards here -->
    </div>

    <!-- Main Content Grid -->
    <form action="/create-order" method="POST" class="grid grid-cols-1 lg:grid-cols-5 gap-8 items-start">
        
        <!-- Left Column -->
        <div class="lg:col-span-3 space-y-8">

            <!-- Item Input Card -->
             <div class="bg-slate-900/50 backdrop-blur-lg border border-slate-800 rounded-xl shadow-2xl shadow-black/20">
                <div class="p-6">
                    <div class="flex justify-between items-center mb-3">
                         <label for="itemsData" class="block font-medium text-white">
                            <i class="ri-file-list-3-line mr-1 align-bottom"></i>
                            Danh sách Items
                        </label>
                        <button type="button" id="clear-btn" class="text-xs text-slate-400 hover:text-white transition flex items-center gap-1">
                            <i class="ri-delete-bin-line"></i>Xóa hết
                        </button>
                    </div>
                    <textarea name="itemsData" id="itemsData" rows="12" required class="form-input font-mono text-sm resize-y" placeholder="Dán danh sách của bạn vào đây, mỗi item một dòng..."></textarea>
                </div>
            </div>
        </div>

        <!-- Right Column (Sticky) -->
        <div class="lg:col-span-2 lg:sticky top-8">
            <div id="summary-card" class="bg-slate-900/50 backdrop-blur-lg border border-slate-800 rounded-xl shadow-2xl shadow-black/20 transition-all duration-300">
                <div class="p-5">
                    <h3 class="text-lg font-bold text-white text-center mb-4">Tóm Tắt Giao Dịch</h3>
                    
                    <div class="bg-slate-800/50 p-4 rounded-lg mb-4">
                        <div class="flex items-center justify-between text-sm">
                            <span class="text-slate-400 flex items-center gap-2"><i class="ri-wallet-3-line"></i>Số dư của bạn</span>
                            <span class="font-bold text-green-400" id="user-balance">0đ</span>
                        </div>
                    </div>

                    <div class="space-y-3 text-sm">
                        <div class="flex items-center justify-between">
                            <span class="text-slate-400">Số items đã nhập</span>
                            <span id="item-count" class="font-semibold text-white bg-slate-700/50 px-2 py-0.5 rounded">0</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-slate-400">Đơn giá áp dụng</span>
                            <span id="price-per-item" class="font-semibold text-white">0đ</span>
                        </div>
                    </div>
                    
                    <div class="my-4 border-t border-dashed border-slate-700"></div>

                    <div class="flex items-center justify-between">
                        <span class="font-bold text-white">Tổng Chi Phí</span>
                        <span id="total-cost" class="font-bold text-2xl text-yellow-400 transition-colors duration-300">0đ</span>
                    </div>

                    <div id="balance-warning" class="bg-red-900/50 border border-red-500/30 text-red-300 px-3 py-2 rounded-lg text-xs text-center hidden mt-4 transition-all">
                        <i class="ri-error-warning-line mr-1"></i> Số dư của bạn không đủ để thực hiện giao dịch này.
                    </div>
                    
                    <button type="submit" id="create-order-btn" class="w-full mt-5 inline-flex items-center justify-center px-5 py-3 bg-gradient-to-r from-blue-600 to-purple-600 border border-transparent rounded-lg font-semibold text-white hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-lg shadow-blue-500/20 hover:shadow-blue-500/30 transform hover:-translate-y-0.5 disabled:opacity-40 disabled:cursor-not-allowed disabled:hover:translate-y-0 disabled:shadow-none disabled:from-slate-600 disabled:to-slate-700">
                        <i class="ri-send-plane-2-line -ml-1 mr-2"></i>
                        <span>Xác Nhận & Tạo Đơn</span>
                    </button>
                </div>
            </div>
        </div>
    </form>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const itemsData = document.getElementById('itemsData');
    const clearBtn = document.getElementById('clear-btn');
    const itemCountEl = document.getElementById('item-count');
    const totalCostEl = document.getElementById('total-cost');
    const createOrderBtn = document.getElementById('create-order-btn');
    const balanceWarning = document.getElementById('balance-warning');
    const pricePerItemEl = document.getElementById('price-per-item');
    const userBalanceEl = document.getElementById('user-balance');
    const pricingTiersContainer = document.getElementById('pricing-tiers-container');
    const summaryCard = document.getElementById('summary-card');

    const pricingTiersForCalc = <%- JSON.stringify(pricingTiers || []) %>.sort((a, b) => b.quantity - a.quantity);
    const userBalance = <%= user.balance %>;
    userBalanceEl.textContent = userBalance.toLocaleString('vi-VN') + 'đ';
    
    const sortedRenderTiers = [...pricingTiersForCalc].sort((a, b) => b.quantity - a.quantity);
    pricingTiersContainer.innerHTML = '';

    if (sortedRenderTiers.length > 0) {
        sortedRenderTiers.forEach((tier, index) => {
            const card = document.createElement('div');
            let cardClasses = "bg-slate-800/50 p-5 py-6 rounded-lg text-center border border-slate-700 transition hover:border-blue-500 hover:bg-slate-800 flex flex-col justify-between";
            let quantityText = '';
            let badge = '';

            if (index === 0) {
                quantityText = `Từ <strong>${tier.quantity}</strong> trở lên`;
                cardClasses += ' relative border-purple-500/50';
                badge = `<div class="absolute -top-2.5 left-0 right-0 text-xs bg-purple-600 text-white font-semibold px-2 py-0.5 rounded-full shadow-lg mx-auto w-24">Giá Tốt Nhất</div>`;
            } else {
                const upperBound = sortedRenderTiers[index - 1].quantity - 1;
                quantityText = `Từ <strong>${tier.quantity}</strong> - <strong>${upperBound}</strong>`;
            }
            
            card.className = cardClasses;
            card.innerHTML = `
                ${badge}
                <div class="flex-grow flex flex-col justify-center">
                    <p class=" font-bold text-white mb-4">${quantityText}</p>
                </div>
                <div>
                    <p class="text-xl font-bold text-yellow-400 font-mono">${tier.price.toLocaleString('vi-VN')}đ</p>
                    <p class="text-xs text-slate-500">/ item</p>
                </div>
            `;
            pricingTiersContainer.appendChild(card);
        });
    }


    function getPriceForQuantity(count) {
        if (pricingTiersForCalc.length === 0) return 0;
        const applicableTier = pricingTiersForCalc.find(tier => count >= tier.quantity);
        return applicableTier ? applicableTier.price : (pricingTiersForCalc[pricingTiersForCalc.length - 1]?.price || 0);
    }

    function updateCost() {
        const lines = itemsData.value.trim().split('\n').filter(line => line.trim() !== '');
        const count = lines.length;
        const currentPrice = getPriceForQuantity(count);
        const totalCost = count * currentPrice;

        itemCountEl.textContent = count;
        pricePerItemEl.textContent = currentPrice.toLocaleString('vi-VN') + 'đ';
        totalCostEl.textContent = totalCost.toLocaleString('vi-VN') + 'đ';

        if (totalCost > userBalance) {
            totalCostEl.classList.add('text-red-400');
            totalCostEl.classList.remove('text-yellow-400');
            balanceWarning.classList.remove('hidden');
            createOrderBtn.disabled = true;
            summaryCard.classList.add('border-red-500/50');
            summaryCard.classList.remove('border-slate-800');
        } else {
            totalCostEl.classList.remove('text-red-400');
            totalCostEl.classList.add('text-yellow-400');
            balanceWarning.classList.add('hidden');
            createOrderBtn.disabled = count === 0;
            summaryCard.classList.remove('border-red-500/50');
            summaryCard.classList.add('border-slate-800');
        }
    }

    itemsData.addEventListener('input', updateCost);
    clearBtn.addEventListener('click', () => {
        itemsData.value = '';
        itemsData.focus();
        updateCost();
    });

    updateCost();
});
</script>
