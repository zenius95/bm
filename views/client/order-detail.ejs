<div class="space-y-8">
    <!-- New Header -->
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
            <a href="/orders" class="inline-flex items-center text-sm text-gray-400 hover:text-white transition-colors duration-200 mb-2">
                <i class="ri-arrow-left-line mr-2"></i>
                Quay lại Lịch sử đơn hàng
            </a>
            <div class="flex items-center gap-4">
                <h1 class="text-3xl font-bold text-white">Chi Tiết Đơn Hàng</h1>
                <% 
                    let statusConfig = { text: 'Pending', color: 'gray' };
                    if (order.status === 'processing') statusConfig = { text: 'Processing', color: 'yellow' };
                    if (order.status === 'completed') statusConfig = { text: 'Completed', color: 'green' };
                    if (order.status === 'failed') statusConfig = { text: 'Failed', color: 'red' };
                %>
                <span id="order-status-badge" class="px-3 py-1 text-sm font-semibold rounded-full bg-<%= statusConfig.color %>-500/20 text-<%= statusConfig.color %>-300"><%= statusConfig.text %></span>
            </div>
            <p class="mt-1 font-mono text-sm text-gray-500">ID: <%= order._id %></p>
        </div>
    </div>

    <div class="grid grid-cols-4 gap-4">

        <!-- New Item List Section -->
        <div class="mt-8 bg-white/5 border border-white/10 rounded-xl col-span-3">
            <div class="p-5 border-b border-white/10 flex flex-col sm:flex-row items-center justify-between gap-4">
                <h3 class="text-lg font-semibold text-white">Danh Sách Items</h3>
                <!-- Filters -->
                <div id="item-filters" class="flex items-center gap-2 text-sm">
                    <button data-filter="all" class="filter-btn active">Tất cả</button>
                    <button data-filter="completed" class="filter-btn">Thành công</button>
                    <button data-filter="failed" class="filter-btn">Thất bại</button>
                    <button data-filter="pending" class="filter-btn">Đang chờ</button>
                </div>
            </div>
            <div id="item-list" class="divide-y divide-white/10 max-h-[60vh] overflow-y-auto">
                <% if (order.items.length === 0) { %>
                    <div class="text-center py-16 px-6">
                        <i class="ri-file-search-line text-5xl text-gray-700"></i>
                        <h4 class="mt-4 text-lg font-semibold text-white">Không có item nào trong đơn hàng này</h4>
                    </div>
                <% } else { %>
                    <% order.items.forEach(item => { %>
                        <div class="p-4 flex items-center justify-between gap-4 item-card" data-status="<%= item.status %>" id="item-row-<%= item._id %>">
                            <div class="font-mono text-gray-300 break-all text-sm"><%= item.data %></div>
                            <% 
                                let itemStatus = { text: 'Queued', color: 'gray', icon: 'ri-time-line' };
                                if (item.status === 'processing') itemStatus = { text: 'Processing', color: 'blue', icon: 'ri-loader-4-line animate-spin' };
                                if (item.status === 'completed') itemStatus = { text: 'Completed', color: 'green', icon: 'ri-check-line' };
                                if (item.status === 'failed') itemStatus = { text: 'Failed', color: 'red', icon: 'ri-close-line' };
                            %>
                            <div class="item-status-display flex items-center flex-shrink-0 gap-2 text-xs font-semibold text-<%= itemStatus.color %>-400">
                                <i class="<%= itemStatus.icon %>"></i>
                                <span><%= itemStatus.text %></span>
                            </div>
                        </div>
                    <% }); %>
                <% } %>
            </div>
        </div>

        <div class="col-span-1">

            <!-- New Stats Section -->
            <div class="mt-8 grid grid-cols-1 gap-4">
                <!-- Left Column: 4 Stat Cards -->
                <div class="lg:col-span-1 grid grid-cols-2 gap-4">
                    <div class="bg-white/5 border border-white/10 rounded-xl p-4 text-center">
                        <div id="total-count" class="text-3xl font-bold font-mono text-sky-400"><%= order.items.length %></div>
                        <div class="text-sm text-gray-400 mt-1">Tổng Items</div>
                    </div>
                    <div class="bg-white/5 border border-white/10 rounded-xl p-4 text-center">
                        <div id="completed-count" class="text-3xl font-bold font-mono text-green-400"><%= order.items.filter(i => i.status === 'completed').length %></div>
                        <div class="text-sm text-gray-400 mt-1">Thành Công</div>
                    </div>
                    <div class="bg-white/5 border border-white/10 rounded-xl p-4 text-center">
                        <div id="failed-count" class="text-3xl font-bold font-mono text-red-400"><%= order.items.filter(i => i.status === 'failed').length %></div>
                        <div class="text-sm text-gray-400 mt-1">Thất Bại</div>
                    </div>
                    <div class="bg-white/5 border border-white/10 rounded-xl p-4 text-center">
                        <div id="pending-count" class="text-3xl font-bold font-mono text-gray-400"><%= order.items.filter(i => i.status === 'queued' || i.status === 'processing').length %></div>
                        <div class="text-sm text-gray-400 mt-1">Đang Chờ</div>
                    </div>
                </div>

                <!-- Right Column: Info Card -->
                <div class="lg:col-span-1 bg-white/5 border border-white/10 rounded-xl p-4 flex flex-col justify-center space-y-3">
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Ngày tạo</span>
                        <span class="font-medium text-gray-200 text-right"><%= new Date(order.createdAt).toLocaleString('vi-VN') %></span>
                    </div>
                    <div class="border-t border-white/10"></div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Tổng chi phí</span>
                        <span class="font-semibold font-mono text-yellow-400 text-lg"><%= order.totalCost.toLocaleString('vi-VN') %>đ</span>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

<style>
    .filter-btn {
        padding: 6px 12px;
        border-radius: 8px;
        background-color: rgba(255, 255, 255, 0.05);
        transition: all 0.2s;
        border: 1px solid;
        white-space: nowrap;
    }

    .filter-btn[data-filter="all"] { color: #60a5fa; border-color: #2563eb; }
    .filter-btn[data-filter="completed"] { color: #4ade80; border-color: #16a34a; }
    .filter-btn[data-filter="failed"] { color: #f87171; border-color: #dc2626; }
    .filter-btn[data-filter="pending"] { color: #fbbf24; border-color: #f59e0b; }

    .filter-btn:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }
    .filter-btn.active {
        color: white !important;
        font-weight: 600;
    }
    .filter-btn[data-filter="all"].active {
        background-color: #2563eb;
    }
    .filter-btn[data-filter="completed"].active {
        background-color: #16a34a;
    }
    .filter-btn[data-filter="failed"].active {
        background-color: #dc2626;
    }
    .filter-btn[data-filter="pending"].active {
        background-color: #f59e0b;
    }
</style>

<script src="/socket.io/socket.io.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const orderId = '<%= order._id %>';

    // --- COUNTERS ---
    const totalCountEl = document.getElementById('total-count');
    const completedCountEl = document.getElementById('completed-count');
    const failedCountEl = document.getElementById('failed-count');
    const pendingCountEl = document.getElementById('pending-count');

    // --- FILTERS ---
    const filterContainer = document.getElementById('item-filters');
    const itemCards = document.querySelectorAll('.item-card');
    let activeFilter = 'all';

    function applyFilter() {
        let hasVisibleItems = false;
        itemCards.forEach(card => {
            const status = card.dataset.status;
            let show = false;
            if (activeFilter === 'all') {
                show = true;
            } else if (activeFilter === 'pending') {
                show = (status === 'queued' || status === 'processing');
            } else {
                show = (status === activeFilter);
            }
            card.style.display = show ? 'flex' : 'none';
            if(show) hasVisibleItems = true;
        });
    }

    if (filterContainer) {
        filterContainer.addEventListener('click', (e) => {
            if (e.target.classList.contains('filter-btn')) {
                filterContainer.querySelector('.filter-btn.active').classList.remove('active');
                e.target.classList.add('active');
                activeFilter = e.target.dataset.filter;
                applyFilter();
            }
        });
    }

    // --- SOCKET.IO ---
    const socket = io();
    socket.on('connect', () => console.log('Connected to order detail socket.'));

    // Update overall order status
    socket.on('order:update', (data) => {
        if (data.id !== orderId) return;
        
        const badge = document.getElementById('order-status-badge');
        if (badge) {
            let config = { text: 'Pending', color: 'gray' };
            if (data.status === 'processing') config = { text: 'Processing', color: 'yellow' };
            if (data.status === 'completed') config = { text: 'Completed', color: 'green' };
            if (data.status === 'failed') config = { text: 'Failed', color: 'red' };
            
            badge.textContent = config.text;
            badge.className = `px-3 py-1 text-sm font-semibold rounded-full bg-${config.color}-500/20 text-${config.color}-300`;
        }
    });

    // Update item counts and individual item status
    socket.on('order:item_update', (data) => {
        if (data.id !== orderId) return;
        
        // Update summary counts
        if(completedCountEl) completedCountEl.textContent = data.completedItems;
        if(failedCountEl) failedCountEl.textContent = data.failedItems;
        if(pendingCountEl) {
            const total = parseInt(totalCountEl.textContent, 10);
            pendingCountEl.textContent = total - data.completedItems - data.failedItems;
        }
        
        // Update individual item card
        if (data.item) {
            const itemCard = document.getElementById(`item-row-${data.item._id}`);
            if (itemCard) {
                itemCard.dataset.status = data.item.status;
                const statusDisplay = itemCard.querySelector('.item-status-display');
                
                let itemStatus = { text: 'Queued', color: 'gray', icon: 'ri-time-line' };
                if (data.item.status === 'processing') itemStatus = { text: 'Processing', color: 'blue', icon: 'ri-loader-4-line animate-spin' };
                if (data.item.status === 'completed') itemStatus = { text: 'Completed', color: 'green', icon: 'ri-check-line' };
                if (data.item.status === 'failed') itemStatus = { text: 'Failed', color: 'red', icon: 'ri-close-line' };

                statusDisplay.className = `item-status-display flex items-center flex-shrink-0 gap-2 text-xs font-semibold text-${itemStatus.color}-400`;
                statusDisplay.innerHTML = `<i class="${itemStatus.icon}"></i><span>${itemStatus.text}</span>`;
                
                // Re-apply filter in case the item's category changed
                applyFilter();
            }
        }
    });
    
    // Initial filter apply
    applyFilter();
});
</script>