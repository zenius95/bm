<div class="space-y-8">
    <div>
        <a href="/orders" class="inline-flex items-center text-sm text-gray-400 hover:text-white transition-colors duration-200 mb-2">
            <i class="ri-arrow-left-line mr-2"></i>
            Quay lại Lịch sử đơn hàng
        </a>
        <h1 class="text-3xl font-bold text-white">Chi Tiết Đơn Hàng</h1>
        <p class="mt-1 font-mono text-sm text-gray-500">ID: <%= order._id %></p>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        <div class="lg:col-span-2 space-y-8">
            <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl">
                <div class="p-6">
                    <h3 class="text-lg font-semibold text-white mb-4">Danh Sách Items</h3>
                    <div class="overflow-auto max-h-[60vh] pr-2">
                        <table class="w-full text-sm text-left text-gray-300">
                            <thead class="text-xs text-gray-400 uppercase bg-black/10 sticky top-0">
                                <tr>
                                   <th class="px-4 py-3">Item Data</th>
                                    <th class="px-4 py-3 text-center">Trạng Thái</th>
                                </tr>
                             </thead>
                            <tbody class="divide-y divide-white/10">
                                <% order.items.forEach(item => { %>
                                 <tr id="item-row-<%= item._id %>">
                                        <td class="px-4 py-3 font-mono break-all"><%= item.data %></td>
                                        <td class="px-4 py-3 text-center">
                                            <span class="item-status-icon inline-flex items-center justify-center w-6 h-6 rounded-full" data-status="<%= item.status %>" title="<%= item.status.charAt(0).toUpperCase() + item.status.slice(1) %>">
                                                <i class="ri-lg"></i>
                                            </span>
                                        </td>
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="lg:col-span-1 sticky top-8">
            <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl p-5 space-y-4">
                <h3 class="text-lg font-bold text-white border-b border-white/10 pb-3">Thông Tin & Thống Kê</h3>
                
                <div class="space-y-2 text-sm">
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Ngày tạo</span>
                        <span class="font-medium text-gray-200"><%= new Date(order.createdAt).toLocaleString('vi-VN') %></span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Tổng chi phí</span>
                        <span class="font-semibold font-mono text-yellow-400"><%= order.totalCost.toLocaleString('vi-VN') %>đ</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Trạng thái</span>
                        <% 
                            let statusConfig = { text: 'Pending', color: 'gray' };
                            if (order.status === 'processing') statusConfig = { text: 'Processing', color: 'yellow' };
                            if (order.status === 'completed') statusConfig = { text: 'Completed', color: 'green' };
                        %>
                        <span id="order-status-badge" class="px-2 py-1 text-xs font-semibold rounded-full bg-<%= statusConfig.color %>-500/20 text-<%= statusConfig.color %>-300"><%= statusConfig.text %></span>
                    </div>
                </div>

                <%# === START: THAY ĐỔI QUAN TRỌNG (Thêm cột Tổng) === %>
                <div class="border-t border-dashed border-white/10 pt-4">
                     <% const completedItems = order.items.filter(i => i.status === 'completed').length; %>
                     <% const failedItems = order.items.filter(i => i.status === 'failed').length; %>
                     <% const totalItems = order.items.length; %>
                    <div class="grid grid-cols-3 gap-3 text-center">
                        <div class="bg-blue-500/10 p-2 rounded">
                            <div id="total-count" class="text-xl font-bold text-blue-400"><%= totalItems %></div>
                            <div class="text-xs text-blue-400/80">Tổng</div>
                        </div>
                        <div class="bg-green-500/10 p-2 rounded">
                            <div id="completed-count" class="text-xl font-bold text-green-400"><%= completedItems %></div>
                            <div class="text-xs text-green-400/80">Thành công</div>
                        </div>
                         <div class="bg-red-500/10 p-2 rounded">
                            <div id="failed-count" class="text-xl font-bold text-red-400"><%= failedItems %></div>
                            <div class="text-xs text-red-400/80">Thất bại</div>
                        </div>
                    </div>
                </div>
                <%# === END: THAY ĐỔI QUAN TRỌNG === %>
            </div>
        </div>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const statusIcons = {
        queued: { icon: 'ri-time-line', classes: 'bg-gray-500/20 text-gray-400' },
        processing: { icon: 'ri-loader-4-line animate-spin', classes: 'bg-blue-500/20 text-blue-400' },
        completed: { icon: 'ri-check-line', classes: 'bg-green-500/20 text-green-400' },
        failed: { icon: 'ri-close-line', classes: 'bg-red-500/20 text-red-400' }
    };

    function updateItemStatusIcon(element) {
        const status = element.dataset.status;
        const config = statusIcons[status] || statusIcons.queued;
        element.className = `item-status-icon inline-flex items-center justify-center w-6 h-6 rounded-full ${config.classes}`;
        element.querySelector('i').className = `ri-lg ${config.icon}`;
        element.title = status.charAt(0).toUpperCase() + status.slice(1);
    }
    
    document.querySelectorAll('.item-status-icon').forEach(updateItemStatusIcon);
    
    const socket = io();
    const orderId = '<%= order._id %>';
    
    socket.on('connect', () => console.log('Connected to order detail socket.'));
    
    socket.on('order:update', (data) => {
        if (data.id !== orderId) return;
        
        const badge = document.getElementById('order-status-badge');
        if (badge) {
            let statusConfig = { text: 'Pending', color: 'gray' };
            if (data.status === 'processing') statusConfig = { text: 'Processing', color: 'yellow' };
            if (data.status === 'completed') statusConfig = { text: 'Completed', color: 'green' };
            
            badge.textContent = statusConfig.text;
            badge.className = `px-2 py-1 text-xs font-semibold rounded-full bg-${statusConfig.color}-500/20 text-${statusConfig.color}-300`;
        }
    });

    socket.on('order:item_update', (data) => {
        if (data.id !== orderId) return;
        
        const { completedItems, failedItems } = data;
        
        const completedCountEl = document.getElementById('completed-count');
        const failedCountEl = document.getElementById('failed-count');
        
        if(completedCountEl) completedCountEl.textContent = completedItems;
        if(failedCountEl) failedCountEl.textContent = failedItems;
    });
});
</script>