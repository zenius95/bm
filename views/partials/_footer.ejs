</main>
        </div>
    </div>

    <div id="toast-container" class="fixed top-5 right-5 z-50 w-full max-w-xs space-y-3">
    </div>
    
    <%# === START: HỆ THỐNG MODAL XÁC NHẬN === %>
    <div id="custom-modal-backdrop" class="fixed inset-0 bg-gray-950/70 backdrop-blur-sm z-[99] hidden transition-opacity duration-300 ease-in-out opacity-0"></div>
    <div id="custom-modal" class="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-[100] w-full max-w-md p-4 hidden transform transition-all duration-300 ease-in-out scale-95 opacity-0">
        <div class="bg-gray-900/80 backdrop-blur-xl border border-white/10 rounded-2xl shadow-2xl shadow-black/20">
            <div class="p-6">
                <div class="flex items-start gap-4">
                    <div id="modal-icon-container" class="w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0">
                        <i id="modal-icon" class="ri-lg"></i>
                    </div>
                    <div>
                        <h3 id="modal-title" class="text-xl font-bold text-white"></h3>
                        <p id="modal-message" class="mt-1 text-gray-300 text-sm"></p>
                    </div>
                </div>
            </div>
            <div id="modal-actions" class="px-6 py-4 bg-white/5 rounded-b-2xl flex justify-end items-center gap-3">
                
            </div>
        </div>
    </div>
    <%# === END: HỆ THỐNG MODAL XÁC NHẬN === %>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        /**
         * Hàm hiển thị toast notification hiện đại.
         * @param {string} message - Nội dung thông báo.
         * @param {string} [title='Thông báo'] - Tiêu đề thông báo.
         * @param {'success'|'error'|'warning'|'info'} [type='info'] - Loại thông báo.
         * @param {number} [duration=5000] - Thời gian hiển thị (ms).
         */
        function showToast(message, title = 'Thông báo', type = 'info', duration = 5000) {
            const container = document.getElementById('toast-container');
            if (!container) return;

            const icons = {
                success: '<i class="ri-checkbox-circle-fill"></i>',
                error: '<i class="ri-close-circle-fill"></i>',
                warning: '<i class="ri-error-warning-fill"></i>',
                info: '<i class="ri-information-fill"></i>'
            };
            const colors = {
                success: 'bg-green-500 border-green-600',
                error: 'bg-red-500 border-red-600',
                warning: 'bg-yellow-500 border-yellow-600',
                info: 'bg-blue-500 border-blue-600'
            };
            const toastId = 'toast-' + Date.now();
            const toastElement = document.createElement('div');
            toastElement.id = toastId;
            toastElement.className = `transform transition-all duration-300 ease-in-out translate-x-full opacity-0`;
            
            toastElement.innerHTML = `
                <div class="flex items-start p-4 rounded-lg shadow-lg text-white ${colors[type] || colors.info} border-l-4">
                    <div class="text-xl mr-3">${icons[type] || icons.info}</div>
                    <div class="flex-1">
                        <p class="font-bold text-sm">${title}</p>
                        <p class="text-xs mt-1">${message}</p>
                    </div>
                    <button onclick="document.getElementById('${toastId}').remove()" class="ml-4 text-xl leading-none">&times;</button>
                </div>
            `;
            container.appendChild(toastElement);

            // Hiệu ứng vào
            setTimeout(() => {
                toastElement.classList.remove('translate-x-full', 'opacity-0');
                toastElement.classList.add('translate-x-0', 'opacity-100');
            }, 100);
            // Tự động đóng
            setTimeout(() => {
                toastElement.classList.add('opacity-0', 'translate-y-[-20px]');
                setTimeout(() => toastElement.remove(), 300);
            }, duration);
        }

        /* === START: LOGIC MODAL XÁC NHẬN === */
        const modal = {
            backdrop: document.getElementById('custom-modal-backdrop'),
            container: document.getElementById('custom-modal'),
            title: document.getElementById('modal-title'),
            message: document.getElementById('modal-message'),
            actions: document.getElementById('modal-actions'),
            iconContainer: document.getElementById('modal-icon-container'),
            icon: document.getElementById('modal-icon'),
            resolvePromise: null
        };
        const modalConfig = {
            warning: { iconClass: 'ri-error-warning-line', colorClasses: 'bg-yellow-500/10 text-yellow-400' },
            danger: { iconClass: 'ri-delete-bin-line', colorClasses: 'bg-red-500/10 text-red-400' },
            info: { iconClass: 'ri-information-line', colorClasses: 'bg-blue-500/10 text-blue-400' },
        };
        function showModal({ title, message, type = 'info', buttons }) {
            return new Promise((resolve) => {
                modal.resolvePromise = resolve;
                
                modal.title.textContent = title;
                modal.message.innerHTML = message.replace(/\n/g, '<br>');

                const config = modalConfig[type] || modalConfig.info;
                modal.icon.className = `ri-lg ${config.iconClass}`;
                modal.iconContainer.className = `w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0 ${config.colorClasses}`;

                modal.actions.innerHTML = '';
                buttons.forEach(btn => {
                    const buttonEl = document.createElement('button');
                    buttonEl.textContent = btn.text;
                    buttonEl.className = btn.class;
                    buttonEl.onclick = () => hideModal(btn.value);
                    modal.actions.appendChild(buttonEl);
                });

                modal.backdrop.classList.remove('hidden');
                modal.container.classList.remove('hidden');
                setTimeout(() => {
                    modal.backdrop.classList.remove('opacity-0');
                    modal.container.classList.remove('opacity-0', 'scale-95');
                }, 10);
            });
        }

        function hideModal(value) {
            modal.backdrop.classList.add('opacity-0');
            modal.container.classList.add('opacity-0', 'scale-95');
            setTimeout(() => {
                modal.backdrop.classList.add('hidden');
                modal.container.classList.add('hidden');
                if (modal.resolvePromise) {
                    modal.resolvePromise(value);
                    modal.resolvePromise = null;
                }
            }, 300);
        }

        function showConfirm(message, type = 'warning') {
            const confirmText = type === 'danger' ? 'Xóa Vĩnh Viễn' : 'Xác Nhận';
            const confirmClass = type === 'danger' 
                ? 'px-4 py-2 bg-red-600 hover:bg-red-700 rounded-lg font-semibold text-sm text-white transition' 
                : 'px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold text-sm text-white transition';
            return showModal({
                title: 'Bạn có chắc chắn?',
                message,
                type,
                buttons: [
                    { text: 'Hủy', value: false, class: 'px-4 py-2 bg-gray-700/50 hover:bg-gray-600/50 rounded-lg font-semibold text-sm text-white transition' },
                    { text: confirmText, value: true, class: confirmClass }
                ]
            });
        }
        /* === END: LOGIC MODAL XÁC NHẬN === */

        <% if (user) { %>
            const userSocket = io();
            // === START: THAY ĐỔI QUAN TRỌNG ===
            userSocket.on('connect', () => {
                // Tham gia một phòng riêng cho user này để nhận thông báo cá nhân
                const userRoom = 'user_<%= user._id %>';
                userSocket.emit('join_room', userRoom);
            });
            // === END: THAY ĐỔI QUAN TRỌNG ===
            userSocket.on('deposit:success', (data) => {
                const formattedAmount = Number(data.amount).toLocaleString('vi-VN');
                const message = `Tài khoản của bạn vừa được cộng ${formattedAmount}đ.`;
                const title = 'Nạp tiền thành công!';
                showToast(message, title, 'success', 10000); // Hiển thị trong 10 giây

                // Cập nhật số dư trên sidebar nếu có
                const userMenuBalance = document.querySelector('#user-menu-container .text-yellow-400');
                if (userMenuBalance) {
                    userMenuBalance.textContent = Number(data.newBalance).toLocaleString('vi-VN') + 'đ';
                }
            });
        <% } %>
    </script>
</body>
</html>