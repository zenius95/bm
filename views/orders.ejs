<%- include('partials/_header.ejs', { title: 'Order Management', page: 'orders' }) %>

<% const inTrash = currentQuery.inTrash === 'true' %>

<main class="main-content">
    <h1 class="display-5 fw-bold mb-4 text-white">
        <%= inTrash ? 'Thùng rác - Đơn hàng' : 'Quản Lý Đơn Hàng' %>
    </h1>

    <% if (!inTrash) { %>
    <div class="card mb-4">
        <div class="card-header"><h5 class="mb-0">Tạo Đơn Hàng Mới</h5></div>
        <div class="card-body">
            <form id="create-order-form">
                <div class="mb-3">
                    <label for="itemsData" class="form-label">Nhập danh sách items (mỗi item một dòng)</label>
                    <textarea class="form-control font-monospace" id="itemsData" name="itemsData" rows="6" placeholder="Item 1...&#10;Item 2...&#10;Item 3..."></textarea>
                </div>
                <button type="submit" id="create-order-btn" class="btn btn-primary">
                    <i class="ri-add-line me-1"></i> Tạo Đơn Hàng
                </button>
            </form>
        </div>
    </div>
    <% } %>

    <div class="card mb-4">
        <div class="card-body">
            <form method="GET" action="/admin/orders" class="row g-3 align-items-center">
                 <% if (inTrash) { %>
                    <input type="hidden" name="inTrash" value="true">
                 <% } %>
                <div class="col-md-8">
                    <select name="status" class="form-select" onchange="this.form.submit()">
                        <option value="">-- Lọc theo trạng thái --</option>
                        <option value="pending" <%= currentQuery.status === 'pending' ? 'selected' : '' %>>Pending</option>
                        <option value="processing" <%= currentQuery.status === 'processing' ? 'selected' : '' %>>Processing</option>
                        <option value="completed" <%= currentQuery.status === 'completed' ? 'selected' : '' %>>Completed</option>
                        <option value="failed" <%= currentQuery.status === 'failed' ? 'selected' : '' %>>Failed</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <button type="submit" class="btn btn-info w-100">Lọc</button>
                </div>
            </form>
        </div>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="h4 text-white mb-0"><%= inTrash ? 'Các mục đã xóa' : 'Danh Sách Đơn Hàng' %> (<%= pagination.totalItems %>)</h2>
        <div>
             <% if (inTrash) { %>
                <a href="/admin/orders" class="btn btn-light"><i class="ri-arrow-left-line me-1"></i> Quay lại danh sách</a>
                <button class="btn btn-info" id="restoreSelectedBtn" disabled><i class="ri-arrow-go-back-line me-1"></i> Khôi phục</button>
                <button class="btn btn-danger" id="hardDeleteSelectedBtn" disabled><i class="ri-delete-bin-fill me-1"></i> Xóa vĩnh viễn</button>
            <% } else { %>
                <a href="/admin/orders?inTrash=true" class="btn btn-secondary"><i class="ri-delete-bin-line me-1"></i> Thùng rác</a>
                <button class="btn btn-warning" id="softDeleteSelectedBtn" disabled><i class="ri-delete-bin-2-line me-1"></i> Bỏ vào thùng rác</button>
            <% } %>
        </div>
    </div>
    
    <div class="card">
        <% if (orders && orders.length > 0) { %>
            <div class="table-responsive">
                <table class="table table-dark table-hover align-middle mb-0">
                    <thead>
                        <tr>
                            <th scope="col" class="ps-4" style="width: 50px;">
                                <input class="form-check-input" type="checkbox" id="selectAllCheckbox">
                            </th>
                            <th scope="col">Order ID</th>
                            <th scope="col">Trạng Thái</th>
                            <th scope="col" class="text-center">Items</th>
                            <th scope="col"><%= inTrash ? 'Ngày Xóa' : 'Ngày Tạo' %></th>
                        </tr>
                    </thead>
                    <tbody>
                        <% orders.forEach(order => { %>
                            <% 
                                let statusClass = 'text-bg-secondary';
                                if (order.status === 'processing') { statusClass = 'text-bg-warning'; }
                                if (order.status === 'completed') { statusClass = 'text-bg-success'; }
                                if (order.status === 'failed') { statusClass = 'text-bg-danger'; }
                            %>
                            <tr>
                                <td class="ps-4">
                                     <input class="form-check-input item-checkbox" type="checkbox" value="<%= order._id %>">
                                </td>
                                <td class="font-monospace">
                                    <a href="/admin/orders/<%= order._id %>" class="link-light fw-bold text-decoration-none"><%= order._id %></a>
                                </td>
                                <td><span class="badge <%= inTrash ? 'text-bg-secondary' : statusClass %> fs-6"><%= inTrash ? 'DELETED' : order.status %></span></td>
                                <td class="text-center">
                                    <span class="fw-bold"><%= order.items.length %></span>
                                </td>
                                <td>
                                    <% if (inTrash && order.deletedAt) { %>
                                        <%= new Date(order.deletedAt).toLocaleString('vi-VN') %>
                                    <% } else { %>
                                        <%= new Date(order.createdAt).toLocaleString('vi-VN') %>
                                    <% } %>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        <% } else { %>
            <div class="card-body">
                <div class="empty-state">
                    <div class="icon mb-3"><i class="ri-file-list-3-line"></i></div>
                    <h4 class="text-white">Không có đơn hàng nào</h4>
                     <p class="text-white-50"><%= inTrash ? 'Thùng rác trống.' : 'Hãy dùng form phía trên để tạo đơn hàng đầu tiên hoặc thay đổi bộ lọc.' %></p>
                </div>
            </div>
        <% } %>
    </div>

    <% if (pagination.totalPages > 1) { %>
    <nav class="mt-4">
        <ul class="pagination justify-content-center">
             <% for(let i = 1; i <= pagination.totalPages; i++) { 
                const query = new URLSearchParams(currentQuery);
                query.set('page', i);
            %>
                <li class="page-item <%= i === pagination.currentPage ? 'active' : '' %>">
                    <a class="page-link" href="?<%= query.toString() %>"><%= i %></a>
                </li>
            <% } %>
        </ul>
    </nav>
    <% } %>
</main>

<script>
    const createOrderForm = document.getElementById('create-order-form');
    if (createOrderForm) {
        const createOrderBtn = document.getElementById('create-order-btn');
        const originalBtnHtml = createOrderBtn.innerHTML;

        createOrderForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            createOrderBtn.disabled = true;
            createOrderBtn.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang tạo...`;

            const formData = new FormData(createOrderForm);
            const data = Object.fromEntries(formData.entries());

            try {
                const response = await fetch('/admin/orders/create', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (response.ok) {
                    showToast(result.message, 'Thành công!', 'success');
                    createOrderForm.reset();
                    setTimeout(() => window.location.reload(), 1500);
                } else {
                    showToast(result.message, 'Có lỗi xảy ra!', 'error');
                }
            } catch (error) {
                showToast('Không thể kết nối đến server.', 'Lỗi mạng!', 'error');
            } finally {
                createOrderBtn.disabled = false;
                createOrderBtn.innerHTML = originalBtnHtml;
            }
        });
    }

    const selectAllCheckbox = document.getElementById('selectAllCheckbox');
    const itemCheckboxes = document.querySelectorAll('.item-checkbox');
    const softDeleteSelectedBtn = document.getElementById('softDeleteSelectedBtn');
    const restoreSelectedBtn = document.getElementById('restoreSelectedBtn');
    const hardDeleteSelectedBtn = document.getElementById('hardDeleteSelectedBtn');

    function toggleActionButtons() {
        const anyChecked = [...itemCheckboxes].some(cb => cb.checked);
        if (softDeleteSelectedBtn) softDeleteSelectedBtn.disabled = !anyChecked;
        if (restoreSelectedBtn) restoreSelectedBtn.disabled = !anyChecked;
        if (hardDeleteSelectedBtn) hardDeleteSelectedBtn.disabled = !anyChecked;
    }

    if (selectAllCheckbox) {
        selectAllCheckbox.addEventListener('change', (e) => {
            itemCheckboxes.forEach(cb => cb.checked = e.target.checked);
            toggleActionButtons();
        });
    }

    itemCheckboxes.forEach(cb => {
        cb.addEventListener('change', toggleActionButtons);
    });

    async function handleAction(url, confirmMessage) {
        const selectedIds = [...itemCheckboxes].filter(cb => cb.checked).map(cb => cb.value);
        if (selectedIds.length === 0) return;
        if (confirm(confirmMessage(selectedIds.length))) {
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ ids: selectedIds })
                });
                const result = await response.json();
                if (result.success) {
                    showToast(result.message, 'Thành công!', 'success');
                    setTimeout(() => window.location.reload(), 1500);
                } else {
                    showToast(result.message, 'Lỗi!', 'error');
                }
            } catch (error) {
                showToast('Lỗi kết nối server.', 'Lỗi!', 'error');
            }
        }
    }
    
    if (softDeleteSelectedBtn) {
        softDeleteSelectedBtn.addEventListener('click', () => {
             handleAction('/admin/orders/soft-delete', (count) => `Bạn có chắc muốn chuyển ${count} đơn hàng vào thùng rác?`);
        });
    }

    if (restoreSelectedBtn) {
        restoreSelectedBtn.addEventListener('click', () => {
             handleAction('/admin/orders/restore', (count) => `Bạn có chắc muốn khôi phục ${count} đơn hàng?`);
        });
    }

    if (hardDeleteSelectedBtn) {
        hardDeleteSelectedBtn.addEventListener('click', () => {
            handleAction('/admin/orders/hard-delete', (count) => `HÀNH ĐỘNG NGUY HIỂM!\nBạn có chắc muốn XÓA VĨNH VIỄN ${count} đơn hàng? Dữ liệu sẽ không thể phục hồi.`);
        });
    }
</script>

<%- include('partials/_footer.ejs') %>