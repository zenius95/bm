<%- include('partials/_header.ejs', { title: 'Quản lý Workers', page: 'workers' }) %>

<div class="space-y-8">
    <div>
        <h1 class="text-3xl font-bold text-white">Quản lý Worker Xử Lý Item</h1>
        <p class="mt-1 text-gray-400">Theo dõi, điều khiển và cấu hình tiến trình xử lý các item của đơn hàng.</p>
    </div>

    <div>
        <h2 class="text-xl font-semibold text-white mb-4">Tổng quan Hệ thống (Real-time)</h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl p-5 transition-all duration-300 hover:border-blue-400/50">
                <div class="flex items-center justify-between">
                    <span class="text-sm font-medium text-gray-400">Trạng thái Worker</span>
                    <i id="proc-status-icon" class="ri-loader-4-line text-2xl text-gray-400"></i>
                </div>
                <p id="proc-status-text" class="mt-2 text-3xl font-bold text-gray-400">Đang tải...</p>
                 <div class="mt-2 text-sm text-gray-400 flex items-center gap-4">
                    <span><i class="ri-loader-2-line"></i> Đang chạy: <strong id="proc-active-tasks" class="text-white">0</strong></span>
                    <span><i class="ri-inbox-line"></i> Chờ: <strong id="proc-queued-tasks" class="text-white">0</strong></span>
                </div>
            </div>
            <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl p-5 transition-all duration-300 hover:border-yellow-400/50">
                <div class="flex items-center justify-between">
                    <span class="text-sm font-medium text-gray-400">CPU Load</span>
                    <i class="ri-cpu-line text-2xl text-yellow-400"></i>
                </div>
                <p id="cpu-stat" class="mt-2 text-3xl font-bold text-yellow-400">0%</p>
            </div>
            <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl p-5 transition-all duration-300 hover:border-green-400/50">
                <div class="flex items-center justify-between">
                    <span class="text-sm font-medium text-gray-400">RAM Trống</span>
                    <i class="ri-database-2-line text-2xl text-green-400"></i>
                </div>
                <p id="ram-stat" class="mt-2 text-3xl font-bold text-green-400">0 / 0 MB</p>
            </div>
        </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl">
            <div class="p-6 border-b border-white/10">
                <h3 class="text-lg font-semibold text-white">Điều khiển & Cấu hình</h3>
            </div>
            <div class="p-6">
                <form id="processor-settings-form" class="space-y-6">
                    <div>
                        <h4 class="font-semibold text-gray-200 mb-2">Trạng thái & Điều khiển</h4>
                        <div class="flex items-center justify-between p-4 bg-gray-900/50 rounded-lg border border-white/10">
                            <span class="text-sm">Bật / Tắt tiến trình xử lý tự động</span>
                            <div class="flex items-center gap-2">
                                <button id="proc-start-btn" type="button" class="px-4 py-2 text-xs bg-green-600/80 hover:bg-green-600 rounded-md transition disabled:opacity-50 font-semibold text-white">Start</button>
                                <button id="proc-stop-btn" type="button" class="px-4 py-2 text-xs bg-red-600/80 hover:bg-red-600 rounded-md transition disabled:opacity-50 font-semibold text-white">Stop</button>
                            </div>
                        </div>
                    </div>
                    <div>
                        <h4 class="font-semibold text-gray-200 mb-2">Cấu hình chi tiết</h4>
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label for="proc-concurrency" class="block text-sm text-gray-300 mb-1">Số item đồng thời</label>
                                <input type="number" id="proc-concurrency" class="form-input text-sm" value="10" min="1">
                            </div>
                            <div>
                                <label for="proc-pollingInterval" class="block text-sm text-gray-300 mb-1">Quét DB mỗi (giây)</label>
                                <input type="number" id="proc-pollingInterval" class="form-input text-sm" value="5" min="1">
                            </div>
                        </div>
                    </div>
                    <div class="pt-6 border-t border-white/10">
                        <button type="submit" class="inline-flex items-center px-4 py-2 bg-blue-600 border border-transparent rounded-md font-semibold text-sm text-white hover:bg-blue-700 transition"><i class="ri-save-line mr-2"></i>Lưu Cấu Hình</button>
                    </div>
                </form>
            </div>
        </div>
        <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl flex flex-col">
             <div class="p-6 border-b border-white/10">
                <h3 class="text-lg font-semibold text-white">Logs thời gian thực</h3>
            </div>
            <div id="processor-logs" class="p-4 flex-grow overflow-y-auto font-mono text-xs text-gray-300">
                <div class="text-gray-500">Đang chờ kết nối...</div>
            </div>
        </div>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const initialState = <%- initialState %>;
    
    // Elements
    const procForm = document.getElementById('processor-settings-form');
    const procConcurrencyInput = document.getElementById('proc-concurrency');
    const procPollingInput = document.getElementById('proc-pollingInterval');
    const procStartBtn = document.getElementById('proc-start-btn');
    const procStopBtn = document.getElementById('proc-stop-btn');
    const procLogs = document.getElementById('processor-logs');

    // Stat Elements
    const procStatusText = document.getElementById('proc-status-text');
    const procStatusIcon = document.getElementById('proc-status-icon');
    const procActiveTasks = document.getElementById('proc-active-tasks');
    const procQueuedTasks = document.getElementById('proc-queued-tasks');
    const cpuStat = document.getElementById('cpu-stat');
    const ramStat = document.getElementById('ram-stat');
    
    // UI Update Functions
    function updateProcUI(state) {
        if (!state) return;
        
        procConcurrencyInput.value = state.config.concurrency;
        procPollingInput.value = state.config.pollingInterval;
        procActiveTasks.textContent = state.activeTasks;
        procQueuedTasks.textContent = state.queuedTasks;

        procStatusIcon.classList.remove('text-green-400', 'text-red-400', 'icon-spin');
        if (state.status === 'RUNNING') {
            procStatusText.textContent = 'Đang chạy';
            procStatusText.classList.remove('text-gray-400', 'text-red-400');
            procStatusText.classList.add('text-green-400');
            procStatusIcon.classList.add('text-green-400', 'icon-spin');
            procStartBtn.disabled = true;
            procStopBtn.disabled = false;
        } else {
            procStatusText.textContent = 'Đã dừng';
            procStatusText.classList.remove('text-gray-400', 'text-green-400');
            procStatusText.classList.add('text-red-400');
            procStatusIcon.classList.add('text-red-400');
            procStartBtn.disabled = false;
            procStopBtn.disabled = true;
        }
    }

    function updateSystemStats(stats) {
        if(!stats) return;
        cpuStat.textContent = `${stats.cpu}%`;
        ramStat.textContent = `${stats.freeMem} / ${stats.totalMem} MB`;
    }

    // API Call
    async function updateProcConfig(payload) {
        try {
            const response = await fetch('/admin/settings/item-processor/config', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            const result = await response.json();
            if (result.success) {
                showToast(result.message, 'Thành công', 'success');
                updateProcUI(result.data);
            } else {
                showToast(result.message, 'Lỗi', 'error');
            }
        } catch (error) {
            showToast('Lỗi kết nối server', 'Lỗi', 'error');
        }
    }

    // Event Listeners
    if (procForm) {
        procForm.addEventListener('submit', (e) => {
            e.preventDefault();
            updateProcConfig({
                concurrency: procConcurrencyInput.value,
                pollingInterval: procPollingInput.value
            });
        });
        procStartBtn.addEventListener('click', () => updateProcConfig({ isEnabled: true }));
        procStopBtn.addEventListener('click', () => updateProcConfig({ isEnabled: false }));
    }

    function addLogMessage(message) {
        if(procLogs.childElementCount > 100) {
            procLogs.removeChild(procLogs.firstChild);
        }
        const logLine = document.createElement('div');
        const time = new Date().toLocaleTimeString('vi-VN');
        logLine.innerHTML = `<span class="text-gray-500 mr-3">[${time}]</span>${message}`;
        procLogs.appendChild(logLine);
        procLogs.scrollTop = procLogs.scrollHeight;
    }

    // Initial State & Socket.IO
    updateProcUI(initialState.itemProcessor);
    procLogs.innerHTML = '';
    addLogMessage('Đã kết nối với server.');

    const socket = io();
    socket.on('itemProcessor:statusUpdate', (state) => updateProcUI(state));
    socket.on('itemProcessor:log', (message) => addLogMessage(message));
    socket.on('system:stats', (stats) => updateSystemStats(stats));
});
</script>

<%- include('partials/_footer.ejs') %>