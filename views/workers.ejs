<%- include('partials/_header.ejs', { title: 'Quản lý Workers', page: 'workers' }) %>

<div class="space-y-8">
    <div class="flex flex-col md:flex-row items-center justify-between gap-4">
        <div>
            <h1 class="text-3xl font-bold text-white">Quản lý Workers</h1>
            <p class="mt-1 text-gray-400">Giám sát và thêm các server worker để xử lý đơn hàng.</p>
        </div>
        <div>
            <button id="add-worker-btn" class="inline-flex items-center justify-center px-5 py-2.5 bg-blue-600 border border-transparent rounded-md font-semibold text-white hover:bg-blue-700 transition-transform duration-200 hover:scale-105">
                <i class="ri-add-line -ml-1 mr-2"></i>
                <span>Thêm Worker</span>
            </button>
        </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6" id="worker-list">
        <% workers.forEach(worker => { %>
            <div id="worker-<%= worker._id %>" class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl p-5 space-y-4">
                <div class="flex items-center justify-between">
                    <h3 class="font-bold text-lg text-white truncate"><%= worker.name %></h3>
                    <% if (worker.status === 'online') { %>
                        <span class="status-badge flex items-center gap-2 px-2.5 py-1 text-xs font-semibold rounded-full bg-green-500/20 text-green-300">
                            <span class="w-2 h-2 rounded-full bg-green-400 animate-pulse"></span> Online
                        </span>
                    <% } else { %>
                         <span class="status-badge flex items-center gap-2 px-2.5 py-1 text-xs font-semibold rounded-full bg-red-500/20 text-red-400">
                            <span class="w-2 h-2 rounded-full bg-red-400"></span> Offline
                        </span>
                    <% } %>
                </div>
                <div class="text-xs text-gray-400 font-mono break-all"><%= worker.url %></div>
                <div class="grid grid-cols-3 gap-4 text-center border-t border-white/10 pt-4">
                    <div>
                        <div class="text-sm text-gray-400">CPU</div>
                        <div class="stat-cpu text-xl font-semibold text-white mt-1"><%= worker.stats.cpu || 0 %>%</div>
                    </div>
                     <div>
                        <div class="text-sm text-gray-400">RAM</div>
                        <div class="stat-ram text-xl font-semibold text-white mt-1"><%= worker.stats.freeMem || 0 %> MB</div>
                    </div>
                     <div>
                        <div class="text-sm text-gray-400">Tasks</div>
                        <div class="stat-tasks text-xl font-semibold text-white mt-1"><%= worker.stats.activeTasks || 0 %></div>
                    </div>
                </div>
            </div>
        <% }) %>
    </div>
</div>


<div id="add-worker-modal-backdrop" class="fixed inset-0 bg-gray-950/70 backdrop-blur-sm z-[99] hidden transition-opacity duration-300 ease-in-out opacity-0"></div>
<div id="add-worker-modal" class="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-[100] w-full max-w-lg p-4 hidden transform transition-all duration-300 ease-in-out scale-95 opacity-0">
    <div class="bg-gray-900/80 backdrop-blur-xl border border-white/10 rounded-2xl shadow-2xl shadow-black/20">
        <form id="add-worker-form">
            <div class="p-6 border-b border-white/10">
                <h3 class="text-xl font-bold text-white">Thêm Worker Mới</h3>
                <p class="text-sm text-gray-400 mt-1">Worker mới sẽ được dùng để xử lý item, giảm tải cho server chính.</p>
            </div>
            <div class="p-6 space-y-4">
                <div>
                    <label for="worker-name" class="block text-sm font-medium text-gray-300 mb-2">Tên Worker</label>
                    <input type="text" id="worker-name" name="name" class="form-input" placeholder="Ví dụ: Server Phụ #1" required>
                </div>
                 <div>
                    <label for="worker-url" class="block text-sm font-medium text-gray-300 mb-2">URL</label>
                    <input type="url" id="worker-url" name="url" class="form-input" placeholder="http://123.45.67.89:3000" required>
                </div>
                 <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                     <div>
                        <label for="worker-username" class="block text-sm font-medium text-gray-300 mb-2">Username (Basic Auth)</label>
                        <input type="text" id="worker-username" name="username" class="form-input" required>
                    </div>
                     <div>
                        <label for="worker-password" class="block text-sm font-medium text-gray-300 mb-2">Password (Basic Auth)</label>
                        <input type="password" id="worker-password" name="password" class="form-input" required>
                    </div>
                 </div>
            </div>
            <div class="px-6 py-4 bg-white/5 rounded-b-2xl flex justify-end items-center gap-3">
                <button type="button" id="cancel-add-worker" class="px-4 py-2 bg-gray-700/50 hover:bg-gray-600/50 rounded-lg font-semibold text-sm text-white transition">Hủy</button>
                <button type="submit" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold text-sm text-white transition">Lưu Worker</button>
            </div>
        </form>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const addWorkerBtn = document.getElementById('add-worker-btn');
    const backdrop = document.getElementById('add-worker-modal-backdrop');
    const modal = document.getElementById('add-worker-modal');
    const cancelBtn = document.getElementById('cancel-add-worker');
    const addWorkerForm = document.getElementById('add-worker-form');

    function showModal() {
        backdrop.classList.remove('hidden');
        modal.classList.remove('hidden');
        setTimeout(() => {
            backdrop.classList.remove('opacity-0');
            modal.classList.remove('opacity-0', 'scale-95');
        }, 10);
    }

    function hideModal() {
        backdrop.classList.add('opacity-0');
        modal.classList.add('opacity-0', 'scale-95');
        setTimeout(() => {
            backdrop.classList.add('hidden');
            modal.classList.add('hidden');
        }, 300);
    }

    addWorkerBtn.addEventListener('click', showModal);
    cancelBtn.addEventListener('click', hideModal);
    backdrop.addEventListener('click', hideModal);

    addWorkerForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(addWorkerForm);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/admin/workers', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            const result = await response.json();
            if (result.success) {
                showToast(result.message, 'Thành công!', 'success');
                hideModal();
                addWorkerForm.reset();
                setTimeout(() => window.location.reload(), 1500);
            } else {
                showToast(result.message, 'Lỗi!', 'error');
            }
        } catch (error) {
            showToast('Không thể kết nối đến server.', 'Lỗi mạng!', 'error');
        }
    });
    
    // Logic real-time
    const socket = io();

    socket.on('connect', () => {
        console.log('Connected to server for worker updates.');
    });

    socket.on('workers:update', (workers) => {
        workers.forEach(worker => {
            const workerCard = document.getElementById(`worker-${worker._id}`);
            if (!workerCard) return;

            // Update Status Badge
            const statusBadge = workerCard.querySelector('.status-badge');
            if (worker.status === 'online') {
                statusBadge.innerHTML = `<span class="w-2 h-2 rounded-full bg-green-400 animate-pulse"></span> Online`;
                statusBadge.className = 'status-badge flex items-center gap-2 px-2.5 py-1 text-xs font-semibold rounded-full bg-green-500/20 text-green-300';
            } else {
                statusBadge.innerHTML = `<span class="w-2 h-2 rounded-full bg-red-400"></span> Offline`;
                statusBadge.className = 'status-badge flex items-center gap-2 px-2.5 py-1 text-xs font-semibold rounded-full bg-red-500/20 text-red-400';
            }

            // Update Stats
            workerCard.querySelector('.stat-cpu').textContent = `${worker.stats.cpu || 0}%`;
            workerCard.querySelector('.stat-ram').textContent = `${worker.stats.freeMem || 0} MB`;
            workerCard.querySelector('.stat-tasks').textContent = `${worker.stats.activeTasks || 0}`;
        });
    });
});
</script>

<%- include('partials/_footer.ejs') %>