<div class="space-y-8">
    <div>
        <h1 class="text-3xl font-bold text-white">Lịch sử giao dịch</h1>
        <p class="mt-1 text-gray-400">Theo dõi tất cả các hoạt động liên quan đến thay đổi số dư người dùng.</p>
    </div>

    <div class="flex flex-col md:flex-row items-center justify-between gap-4">
        <form method="GET" action="/admin/transactions" class="flex flex-col md:flex-row items-stretch md:items-center gap-3">
            <input type="text" name="searchUser" class="form-input" placeholder="Tìm theo Username..." value="<%= currentQuery.searchUser || '' %>">
            
            <select name="searchAction" class="form-select">
                <option value="">-- Lọc theo hành động --</option>
                <% Object.entries(actionLabels).forEach(([key, { label }]) => { %>
                    <option value="<%= key %>" <%= currentQuery.searchAction === key ? 'selected' : '' %>><%= label %></option>
                <% }); %>
            </select>

            <div class="flex items-center gap-2">
                 <button type="submit" class="w-full md:w-auto px-4 py-2.5 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold text-sm text-white transition whitespace-nowrap">Lọc</button>
                 <a href="/admin/transactions" class="w-full md:w-auto text-center px-4 py-2.5 bg-gray-700/50 hover:bg-gray-600/50 rounded-lg font-semibold text-sm text-gray-300 transition whitespace-nowrap">Reset</a>
            </div>
        </form>
         <div>
            <button id="hardDeleteSelectedBtn" disabled class="inline-flex items-center px-4 py-2 bg-red-600/80 border border-red-500 rounded-md font-semibold text-sm text-white hover:bg-red-600 transition disabled:opacity-50 disabled:cursor-not-allowed">
                <i class="ri-delete-bin-fill mr-2"></i> Xóa mục đã chọn
            </button>
        </div>
    </div>
   
    <% if (pagination.totalPages > 1) { %>
        <div id="select-all-banner" class="hidden bg-blue-500/20 border border-blue-500/30 text-blue-300 px-4 py-3 rounded-lg text-sm" role="alert">
            Tất cả <strong id="items-on-page-count"></strong> mục trên trang này đã được chọn. <a href="#" id="select-all-matching-items" class="font-bold underline hover:text-white">Chọn tất cả <%= pagination.totalItems %> mục khớp với tìm kiếm này.</a>
        </div>
        <div id="clear-selection-banner" class="hidden bg-blue-500/20 border border-blue-500/30 text-blue-300 px-4 py-3 rounded-lg text-sm" role="alert">
            Tất cả <strong><%= pagination.totalItems %></strong> mục đã được chọn. <a href="#" id="clear-selection" class="font-bold underline hover:text-white">Bỏ chọn.</a>
        </div>
    <% } %>

     <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl overflow-hidden">
        <div class="overflow-x-auto">
            <table class="w-full text-sm text-left text-gray-300">
                <thead class="text-xs text-gray-400 uppercase bg-white/5">
                     <tr>
                        <th scope="col" class="p-4"><input type="checkbox" id="selectAllCheckbox" class="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-600 focus:ring-2"></th>
                        <th scope="col" class="px-6 py-3">Thời gian</th>
                        <th scope="col" class="px-6 py-3">Người dùng</th>
                        <th scope="col" class="px-6 py-3">Hành động</th>
                        <th scope="col" class="px-6 py-3">Chi tiết</th>
                         <th scope="col" class="px-6 py-3 text-right">Số dư trước</th>
                        <th scope="col" class="px-6 py-3 text-right">Thay đổi</th>
                        <th scope="col" class="px-6 py-3 text-right">Số dư sau</th>
                    </tr>
                   </thead>
                <tbody>
                    <% if (logs && logs.length > 0) { %>
                         <% logs.forEach(log => { %>
                           <tr id="log-row-<%= log._id %>" class="border-b border-white/10 hover:bg-white/5 transition-colors duration-200">
                                <td class="p-4"><input type="checkbox" value="<%= log._id %>" class="item-checkbox w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-600 focus:ring-2"></td>
                           <%
                                let before = 'N/A';
                                let after = 'N/A';
                                let change = 'N/A';
                                let changeClass = 'text-gray-400';

                                if (log.metadata && typeof log.metadata.balanceBefore !== 'undefined' && typeof log.metadata.balanceAfter !== 'undefined') {
                                    const beforeRaw = log.metadata.balanceBefore;
                                    const afterRaw = log.metadata.balanceAfter;
                                    const changeAmount = log.metadata.change || (afterRaw - beforeRaw);

                                    before = beforeRaw.toLocaleString('vi-VN') + 'đ';
                                    after = afterRaw.toLocaleString('vi-VN') + 'đ';

                                    if (changeAmount > 0) {
                                        change = `+${changeAmount.toLocaleString('vi-VN')}đ`;
                                        changeClass = 'text-green-400';
                                    } else if (changeAmount < 0) {
                                        change = `${changeAmount.toLocaleString('vi-VN')}đ`;
                                        changeClass = 'text-red-400';
                                    } else {
                                        change = '0đ';
                                    }
                                }
                            %>
                                 <td class="px-6 py-4 text-gray-400 whitespace-nowrap"><%= new Date(log.createdAt).toLocaleString('vi-VN') %></td>
                                <td class="px-6 py-4 font-medium text-white"><%= log.user ? log.user.username : 'N/A' %></td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <% const actionInfo = actionLabels[log.action] || { label: log.action, color: 'bg-gray-700 text-gray-300' }; %>
                                    <span class="px-2.5 py-1 text-xs font-semibold rounded-full <%= actionInfo.color %>">
                                        <%= actionInfo.label %>
                                   </span>
                                </td>
                                <td class="px-6 py-4 text-gray-300"><%= log.details %></td>
                                 <td class="px-6 py-4 text-gray-400 font-mono text-right"><%= before %></td>
                                <td class="px-6 py-4 font-mono text-right font-semibold <%= changeClass %>"><%= change %></td>
                             <td class="px-6 py-4 text-white font-mono text-right font-bold"><%= after %></td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="8" class="text-center py-16 px-6">
                             <i class="ri-file-search-line text-6xl text-gray-700"></i>
                                <h4 class="mt-4 text-xl font-semibold text-white">Không tìm thấy giao dịch nào</h4>
                                <p class="mt-2 text-gray-400">Hãy thử thay đổi bộ lọc.</p>
                             </td>
                        </tr>
                    <% } %>
                </tbody>
             </table>
               </div>
    </div>

    <% if (pagination.totalPages > 1) { %>
    <nav class="flex justify-center">
        <ul class="inline-flex items-center -space-x-px">
            <% for(let i = 1; i <= pagination.totalPages; i++) { 
                const query = new URLSearchParams(currentQuery);
 query.set('page', i);
            %>
                <li>
                    <a href="?<%= query.toString() %>" class="px-3 py-2 leading-tight transition-colors duration-200 <%= i === pagination.currentPage ? 'bg-blue-600 text-white border-blue-600' : 'bg-gray-800 text-gray-400 border-gray-700 hover:bg-gray-700 hover:text-white' %> <%= i === 1 ? 'rounded-l-lg' : '' %> <%= i === pagination.totalPages ? 'rounded-r-lg' : '' %>"><%= i %></a>
                </li>
                   <% } %>
        </ul>
    </nav>
    <% } %>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const selectAllCheckbox = document.getElementById('selectAllCheckbox');
    const itemCheckboxes = document.querySelectorAll('.item-checkbox');
    const hardDeleteSelectedBtn = document.getElementById('hardDeleteSelectedBtn');
    const selectAllBanner = document.getElementById('select-all-banner');
    const clearSelectionBanner = document.getElementById('clear-selection-banner');
    const selectAllMatchingItemsLink = document.getElementById('select-all-matching-items');
    const clearSelectionLink = document.getElementById('clear-selection');
    const itemsOnPageCountSpan = document.getElementById('items-on-page-count');
    let isSelectAllAcrossPages = false;

    function updateBanners() {
        if (!selectAllBanner) return;
        const allCheckedOnPage = itemCheckboxes.length > 0 && [...itemCheckboxes].every(cb => cb.checked);
        if (isSelectAllAcrossPages) {
            selectAllBanner.classList.add('hidden');
            clearSelectionBanner.classList.remove('hidden');
        } else if (allCheckedOnPage) {
            itemsOnPageCountSpan.textContent = itemCheckboxes.length;
            selectAllBanner.classList.remove('hidden');
            clearSelectionBanner.classList.add('hidden');
        } else {
            selectAllBanner.classList.add('hidden');
            clearSelectionBanner.classList.add('hidden');
        }
    }

    function toggleActionButtons() {
        const anyChecked = [...itemCheckboxes].some(cb => cb.checked) || isSelectAllAcrossPages;
        if (hardDeleteSelectedBtn) hardDeleteSelectedBtn.disabled = !anyChecked;
    }

    if (selectAllCheckbox) {
        selectAllCheckbox.addEventListener('change', (e) => {
            isSelectAllAcrossPages = false;
            itemCheckboxes.forEach(cb => cb.checked = e.target.checked);
            toggleActionButtons();
            updateBanners();
        });
    }

    itemCheckboxes.forEach(cb => {
        cb.addEventListener('change', () => {
            isSelectAllAcrossPages = false;
            if (selectAllCheckbox) selectAllCheckbox.checked = [...itemCheckboxes].every(c => c.checked);
            toggleActionButtons();
            updateBanners();
        });
    });

    if (selectAllMatchingItemsLink) {
        selectAllMatchingItemsLink.addEventListener('click', (e) => {
            e.preventDefault();
            isSelectAllAcrossPages = true;
            toggleActionButtons();
            updateBanners();
        });
    }

    if(clearSelectionLink) {
        clearSelectionLink.addEventListener('click', (e) => {
            e.preventDefault();
            isSelectAllAcrossPages = false;
            if (selectAllCheckbox) selectAllCheckbox.checked = false;
            itemCheckboxes.forEach(cb => cb.checked = false);
            toggleActionButtons();
            updateBanners();
        });
    }

    async function handleBulkDelete() {
        let payload = {};
        const selectedIdsOnPage = [...itemCheckboxes].filter(cb => cb.checked).map(cb => cb.value);

        if (isSelectAllAcrossPages) {
            payload = { selectAll: true, filters: <%- JSON.stringify(currentQuery) %> };
        } else {
            if (selectedIdsOnPage.length === 0) {
                return showToast('Vui lòng chọn ít nhất một mục.', 'Cảnh báo!', 'warning');
            };
            payload = { ids: selectedIdsOnPage };
        }
        const totalCount = isSelectAllAcrossPages ? <%= pagination.totalItems %> : selectedIdsOnPage.length;

        const confirmed = await showConfirm(`Bạn có chắc muốn XÓA VĨNH VIỄN ${totalCount} mục giao dịch? Hành động này không thể hoàn tác.`, 'danger');
        if (confirmed) {
            try {
                const response = await fetch('/admin/transactions/hard-delete', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();
                if (result.success) {
                    showToast(result.message, 'Thành công!', 'success');
                    if (payload.selectAll) {
                        setTimeout(() => window.location.reload(), 1000);
                    } else {
                        payload.ids.forEach(id => {
                            const row = document.getElementById(`log-row-${id}`);
                            if (row) row.remove();
                        });
                        if (selectAllCheckbox) selectAllCheckbox.checked = false;
                        toggleActionButtons();
                        updateBanners();
                    }
                } else {
                    showToast(result.message, 'Lỗi!', 'error');
                }
            } catch (error) {
                showToast('Lỗi kết nối server.', 'Lỗi mạng!', 'error');
            }
        }
    }
    
    if (hardDeleteSelectedBtn) {
        hardDeleteSelectedBtn.addEventListener('click', handleBulkDelete);
    }
    toggleActionButtons();
});
</script>