<div class="space-y-8">
    <div>
        <h1 class="text-3xl font-bold text-white">Cài Đặt Hệ Thống</h1>
        <p class="mt-1 text-gray-400">Quản lý và tinh chỉnh hoạt động của hệ thống tại đây.</p>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        <div class="lg:col-span-1">
            <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl p-2 sticky top-8">
                <div class="space-y-1" id="settings-tab-list">
 
                   <a class="flex items-center px-4 py-2.5 rounded-lg text-sm font-medium transition-all duration-200 cursor-pointer" data-tab-target="#tab-security" role="tab">
                        <i class="ri-shield-keyhole-line w-5 h-5 mr-3"></i> Bảo Mật & API
                    </a>
                    <%# === START: THAY ĐỔI QUAN TRỌNG === %>
                    <a class="flex items-center px-4 py-2.5 rounded-lg text-sm font-medium transition-all duration-200 cursor-pointer" data-tab-target="#tab-order" role="tab">
                        <i class="ri-shopping-cart-line w-5 h-5 mr-3"></i> Đơn Hàng
                    </a>
                    <%# === END: THAY ĐỔI QUAN TRỌNG === %>
                   <a class="flex items-center px-4 py-2.5 rounded-lg text-sm font-medium transition-all duration-200 cursor-pointer" data-tab-target="#tab-autocheck" role="tab">
                        <i class="ri-refresh-line w-5 h-5 mr-3"></i> Tự Động Check Live
                    </a>
                    <a class="flex items-center px-4 py-2.5 rounded-lg text-sm font-medium transition-all duration-200 cursor-pointer" data-tab-target="#tab-processor" role="tab">
 
                       <i class="ri-database-2-line w-5 h-5 mr-3"></i> Tiến Trình Xử Lý
                    </a>
                </div>
            </div>
        </div>

        <div class="lg:col-span-3" id="settings-tab-content">
   
             
            <div id="tab-security" role="tabpanel" class="tab-pane">
                <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl">
                    <div class="p-6 border-b border-white/10"><h3 class="text-lg font-semibold text-white">Master API Key</h3></div>
                    <div class="p-6">
      
                       <form id="api-key-form" class="space-y-6">
                            <div>
                                <label for="masterApiKey" class="block text-sm text-gray-300 mb-1">API Key Chính Của Server</label>
           
                           <div class="flex items-center gap-2">
                                    <input type="text" id="masterApiKey" class="form-input font-mono" value="<%= settings.masterApiKey %>" readonly>
                                
                                 <button type="button" id="copy-api-key-btn" class="p-3 bg-gray-700/50 hover:bg-gray-600/50 rounded-lg transition" title="Copy"><i class="ri-file-copy-line"></i></button>
                                    <button type="button" id="regenerate-api-key-btn" class="p-3 bg-blue-600/80 hover:bg-blue-600 rounded-lg transition" title="Tạo key mới"><i class="ri-refresh-line"></i></button>
                                </div>
        
                                 <p class="text-xs text-gray-500 mt-2">API key này được dùng để xác thực kết nối giữa các server worker.
 Worker cục bộ sẽ tự động dùng key này.</p>
                            </div>
                             <div class="pt-6 border-t border-white/10">
                                
                                 <button type="submit" class="inline-flex items-center px-4 py-2 bg-blue-600 border border-transparent rounded-md font-semibold text-sm text-white hover:bg-blue-700 transition"><i class="ri-save-line mr-2"></i>Lưu API Key</button>
                            </div>
                        </form>
                    </div>
          
             </div>
            </div>
            
            <%# === START: THAY ĐỔI QUAN TRỌNG === %>
            <div id="tab-order" role="tabpanel" class="tab-pane hidden">
                <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl">
                    <div class="p-6 border-b border-white/10">
                        <h3 class="text-lg font-semibold text-white">Cài Đặt Đơn Hàng</h3>
                    </div>
                    <div class="p-6">
                        <form id="order-settings-form">
                            <div>
                                <label for="pricePerItem" class="block text-sm font-medium text-gray-300 mb-2">Giá tiền cho mỗi item (VNĐ)</label>
                                <input type="number" id="pricePerItem" name="pricePerItem" class="form-input" value="<%= settings.order.pricePerItem %>" min="0" required>
                                <p class="text-xs text-gray-500 mt-2">Số tiền này sẽ bị trừ vào tài khoản của user cho mỗi item khi tạo đơn hàng.</p>
                            </div>
                            <div class="pt-6 mt-4 border-t border-white/10">
                                <button type="submit" class="inline-flex items-center px-4 py-2 bg-blue-600 border border-transparent rounded-md font-semibold text-sm text-white hover:bg-blue-700 transition">
                                    <i class="ri-save-line -ml-1 mr-2"></i>
                                    <span>Lưu Cài Đặt</span>
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <%# === END: THAY ĐỔI QUAN TRỌNG === %>

            <div id="tab-autocheck" role="tabpanel" class="tab-pane">
                <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl">
                    <div class="p-6 border-b border-white/10"><h3 class="text-lg font-semibold text-white">Cài Đặt Tự Động Check Live Account</h3></div>
              
                 <div class="p-6">
                        <form id="autocheck-settings-form" class="space-y-6">
                            <div>
                                <h4 class="font-semibold text-gray-200 mb-2">Trạng thái & Điều 
 khiển</h4>
                                <div class="flex items-center justify-between p-4 bg-gray-900/50 rounded-lg border border-white/10">
                                    <div>
                        
                                 <strong class="text-sm">Trạng thái: </strong>
                                        <span id="status-badge" class="px-2 py-1 text-xs font-semibold rounded-full bg-gray-700 text-gray-300">Đang tải...</span>
                                
                         <div id="next-run-container" class="mt-2 text-sm text-gray-400" style="display: none;">
                                            <i class="ri-time-line"></i> Lần chạy kế tiếp: <strong id="next-run-time" class="text-white"></strong>
                                  
                       </div>
                                    </div>
                                    <div class="flex items-center gap-2">
                   
                                       <button id="start-btn" type="button" class="px-3 py-1.5 text-xs bg-green-600/80 hover:bg-green-600 rounded-md transition disabled:opacity-50 font-semibold text-white">Start</button>
                                        <button id="stop-btn" type="button" class="px-3 py-1.5 text-xs bg-red-600/80 hover:bg-red-600 rounded-md transition disabled:opacity-50 font-semibold text-white">Stop</button>
               
                                     </div>
                                </div>
                            </div>
                   
                       <div>
                                <h4 class="font-semibold text-gray-200 mb-2">Cấu hình chi tiết</h4>
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                 
                                     <div>
                                        <label for="intervalMinutes" class="block text-sm text-gray-300 mb-1">Chạy lại sau (phút)</label>
                                 
                       <input type="number" id="intervalMinutes" class="form-input text-sm" value="<%= settings.autoCheck.intervalMinutes %>" min="1">
                                    </div>
                                    <div>
             
                                         <label for="concurrency" class="block text-sm text-gray-300 mb-1">Số luồng đồng thời</label>
                                        <input type="number" id="concurrency" class="form-input text-sm" value="<%= settings.autoCheck.concurrency %>" min="1">
                 
                                     </div>
                                    <div>
                                        <label for="batchSize" class="block text-sm text-gray-300 
 mb-1">Số account mỗi lượt</label>
                                        <input type="number" id="batchSize" class="form-input text-sm" value="<%= settings.autoCheck.batchSize %>" min="0">
                                        <p class="text-xs text-gray-500 mt-1">Nhập 0 để không giới hạn.</p>
 
                                                                    </div>
                                    <div>
                             
                           <label for="delay" class="block text-sm text-gray-300 mb-1">Delay giữa các task (ms)</label>
                                        <input type="number" id="delay" class="form-input text-sm" value="<%= settings.autoCheck.delay %>" min="0">
                                
                             </div>
                                    <div>
                                        <label for="timeout" class="block text-sm text-gray-300 mb-1">Timeout mỗi task (ms)</label>
            
                                         <input type="number" id="timeout" class="form-input text-sm" value="<%= settings.autoCheck.timeout %>" min="1000">
                                    </div>
                            
                             </div>
                            </div>
                            <div class="pt-6 border-t border-white/10">
                                <button type="submit" class="inline-flex items-center px-4 
 py-2 bg-blue-600 border border-transparent rounded-md font-semibold text-sm text-white hover:bg-blue-700 transition"><i class="ri-save-line mr-2"></i>Lưu Cấu Hình</button>
                            </div>
                        </form>
                    </div>
               
                 </div>
            </div>
            
            <div id="tab-processor" role="tabpanel" class="tab-pane hidden">
                <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl">
                    <div class="p-6 border-b border-white/10"><h3 class="text-lg font-semibold text-white">Cài Đặt Tiến Trình Xử Lý Đơn Hàng</h3></div>
     
                               <div class="p-6">
                        <form id="processor-settings-form" class="space-y-6">
                             <div>
                             
                       <h4 class="font-semibold text-gray-200 mb-2">Trạng thái</h4>
                                <div class="p-4 bg-gray-900/50 rounded-lg border border-white/10">
                                    <strong class="text-sm">Trạng thái: </strong>
                 
                                       <span class="px-2 py-1 text-xs font-semibold rounded-full bg-green-500/20 text-green-300">Luôn Chạy</span>
                                    <p class="text-xs text-gray-400 mt-2">Tiến trình xử lý đơn hàng sẽ luôn chạy cùng với server để đảm bảo không bỏ lỡ bất kỳ item nào.</p>
             
                                     </div>
                            </div>
                            <div>
                         
                       <h4 class="font-semibold text-gray-200 mb-2">Cấu hình chi tiết</h4>
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
               
                                       <label for="proc-concurrency" class="block text-sm text-gray-300 mb-1">Số luồng đồng thời (tổng)</label>
                                        <input type="number" id="proc-concurrency" class="form-input text-sm" value="<%= settings.itemProcessor.concurrency %>" min="1">
                  
                                     </div>
                                    <div>
                                        <label for="proc-pollingInterval" class="block text-sm text-gray-300 mb-1">Quét 
 đơn hàng mới mỗi (giây)</label>
                                        <input type="number" id="proc-pollingInterval" class="form-input text-sm" value="<%= settings.itemProcessor.pollingInterval %>" min="1">
                                    </div>
            
                                     </div>
                            </div>
                            <div class="pt-6 border-t border-white/10">
                     
                           <button type="submit" class="inline-flex items-center px-4 py-2 bg-blue-600 border border-transparent rounded-md font-semibold text-sm text-white hover:bg-blue-700 transition"><i class="ri-save-line mr-2"></i>Lưu Cấu Hình</button>
                            </div>
                        </form>
                   
                 </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    // === Tab Logic ===
    const tabLinks = document.querySelectorAll('#settings-tab-list a[role="tab"]');
     const tabPanes = document.querySelectorAll('#settings-tab-content .tab-pane');
    const activeClasses = ['text-white', 'bg-blue-600/50'];
    const inactiveClasses = ['text-gray-400', 'hover:bg-white/10', 'hover:text-white'];
     function activateTab(targetId) {
        tabLinks.forEach(link => {
            const linkTarget = link.getAttribute('data-tab-target');
            if (linkTarget === targetId) {
                link.classList.add(...activeClasses);
                link.classList.remove(...inactiveClasses);
            } else {
           
                 link.classList.remove(...activeClasses);
                link.classList.add(...inactiveClasses);
            }
        });
     tabPanes.forEach(pane => {
            if (pane.id === targetId.substring(1)) {
                pane.classList.remove('hidden');
            } else {
                pane.classList.add('hidden');
            }
        });
     }

    tabLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            activateTab(link.getAttribute('data-tab-target'));
        });
    });
     if (tabLinks.length > 0) {
        activateTab(tabLinks[0].getAttribute('data-tab-target'));
     }

    const initialState = <%- initialState %>;
    const socket = io();
     // --- Security & API Key ---
    const apiKeyForm = document.getElementById('api-key-form');
     if(apiKeyForm) {
        const apiKeyInput = document.getElementById('masterApiKey');
        const regenerateBtn = document.getElementById('regenerate-api-key-btn');
     const copyBtn = document.getElementById('copy-api-key-btn');

        regenerateBtn.addEventListener('click', () => {
            // Chỉ tạo key ở client để hiển thị, không lưu ngay
            apiKeyInput.value = [...Array(64)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');
        });
     copyBtn.addEventListener('click', () => {
            apiKeyInput.select();
            document.execCommand('copy');
            showToast('Đã copy API Key!', 'Thành công', 'success');
        });
     apiKeyForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            try {
                const response = await fetch('/admin/settings/api-key/update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
     
                                   body: JSON.stringify({ masterApiKey: apiKeyInput.value })
                });
                const result = await response.json();
                if (result.success) {
                    showToast(result.message, 'Thành công!', 'success');
    
                 } else {
                    showToast(result.message, 'Lỗi!', 'error');
                }
            } catch (error) {
                showToast('Lỗi kết nối server.', 'Lỗi mạng!', 'error');
           
           }
        });
     }
    
    // === START: THAY ĐỔI QUAN TRỌNG (Logic cho form cài đặt đơn hàng) ===
    const orderSettingsForm = document.getElementById('order-settings-form');
    if (orderSettingsForm) {
        orderSettingsForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const pricePerItem = document.getElementById('pricePerItem').value;
            try {
                const response = await fetch('/admin/settings/order/config', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ pricePerItem })
                });
                const result = await response.json();
                if (result.success) {
                    showToast(result.message, 'Thành công', 'success');
                } else {
                    showToast(result.message, 'Lỗi!', 'error');
                }
            } catch (error) {
                showToast('Lỗi kết nối server.', 'Lỗi mạng!', 'error');
            }
        });
    }
    // === END: THAY ĐỔI QUAN TRỌNG ===

    // --- Auto Check Live ---
    const autoCheckForm = document.getElementById('autocheck-settings-form');
     if (autoCheckForm) {
        const intervalInput = document.getElementById('intervalMinutes');
        const concurrencyInput = document.getElementById('concurrency');
     const delayInput = document.getElementById('delay');
        const timeoutInput = document.getElementById('timeout');
        const batchSizeInput = document.getElementById('batchSize'); 
        const startBtn = document.getElementById('start-btn');
        const stopBtn = document.getElementById('stop-btn');
     const statusBadge = document.getElementById('status-badge');
        const nextRunContainer = document.getElementById('next-run-container');
        const nextRunTime = document.getElementById('next-run-time');
     function updateAutoCheckUI(state) {
            if (!state) return;
     statusBadge.className = 'px-2 py-1 text-xs font-semibold rounded-full '; 
            if (state.status === 'RUNNING') {
                statusBadge.textContent = state.isJobRunning ?
 'Đang check...' : 'Đang chạy';
                statusBadge.classList.add('bg-green-500/20', 'text-green-300');
                startBtn.disabled = true;
                stopBtn.disabled = false;
     } else {
                statusBadge.textContent = 'Đã dừng';
     statusBadge.classList.add('bg-red-500/20', 'text-red-300');
                startBtn.disabled = false;
                stopBtn.disabled = true;
            }
            intervalInput.value = state.config.intervalMinutes;
     concurrencyInput.value = state.config.concurrency;
            delayInput.value = state.config.delay;
            timeoutInput.value = state.config.timeout;
            batchSizeInput.value = state.config.batchSize;
     if (state.nextRun && !state.isJobRunning) {
                nextRunTime.textContent = new Date(state.nextRun).toLocaleString('vi-VN');
     nextRunContainer.style.display = 'block';
            } else {
                nextRunContainer.style.display = 'none';
     }
        }

        async function updateAutoCheckConfig(payload) {
            try {
                const response = await fetch('/admin/settings/auto-check/config', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
  
                                     body: JSON.stringify(payload)
                });
     const result = await response.json();
                if (result.success) {
                    showToast(result.message, 'Thành công', 'success');
     updateAutoCheckUI(result.data);
                } else {
                    showToast(result.message, 'Lỗi', 'error');
     }
            } catch (error) {
                showToast('Lỗi kết nối server', 'Lỗi', 'error');
     }
        }

        autoCheckForm.addEventListener('submit', (e) => {
            e.preventDefault();
            updateAutoCheckConfig({
                intervalMinutes: intervalInput.value,
                concurrency: concurrencyInput.value,
                delay: delayInput.value,
      
                 timeout: timeoutInput.value,
                batchSize: batchSizeInput.value
            });
        });
     startBtn.addEventListener('click', () => updateAutoCheckConfig({ isEnabled: true }));
        stopBtn.addEventListener('click', () => updateAutoCheckConfig({ isEnabled: false }));
        
        updateAutoCheckUI(initialState.autoCheck);
        socket.on('autoCheck:statusUpdate', (state) => updateAutoCheckUI(state));
     }
    
    // --- Item Processor ---
    const procForm = document.getElementById('processor-settings-form');
     if (procForm) {
        const procConcurrencyInput = document.getElementById('proc-concurrency');
        const procPollingInput = document.getElementById('proc-pollingInterval');
     async function updateProcConfig(payload) {
            try {
                const response = await fetch('/admin/settings/item-processor/config', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                  
                     body: JSON.stringify(payload)
                });
     const result = await response.json();
                if (result.success) {
                    showToast(result.message, 'Thành công!', 'success');
     } else {
                    showToast(result.message, 'Lỗi!', 'error');
     }
            } catch (error) {
                showToast('Lỗi kết nối server', 'Lỗi', 'error');
     }
        }

        procForm.addEventListener('submit', (e) => {
            e.preventDefault();
            updateProcConfig({
                concurrency: procConcurrencyInput.value,
                pollingInterval: procPollingInput.value
            });
        });
     }
});
</script>