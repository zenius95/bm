<div class="space-y-8">
    <div class="flex flex-col md:flex-row items-center justify-between gap-4">
        <div>
            <h1 class="text-3xl font-bold text-white">Quản Lý User</h1>
            <p class="mt-1 text-gray-400">Quản lý tài khoản người dùng và admin.</p>
        </div>
        <div>
             <button id="add-user-btn" class="inline-flex items-center justify-center px-5 py-2.5 bg-blue-600 border border-transparent rounded-md font-semibold text-white hover:bg-blue-700 transition-transform duration-200 hover:scale-105">
                <i class="ri-user-add-line -ml-1 mr-2"></i>
                <span>Thêm User</span>
            </button>
        </div>
    </div>

    <div class="flex flex-col md:flex-row items-center justify-between gap-4">
        <form method="GET" action="/admin/users" class="flex flex-col md:flex-row items-stretch md:items-center gap-3">
            <input type="text" name="search" class="form-input" placeholder="Tìm theo Username, Email..." value="<%= currentQuery.search || '' %>">
            <select name="role" class="form-select">
                <option value="">-- Lọc theo vai trò --</option>
                <option value="user" <%= currentQuery.role === 'user' ? 'selected' : '' %>>User</option>
                <option value="admin" <%= currentQuery.role === 'admin' ? 'selected' : '' %>>Admin</option>
            </select>
            <div class="flex items-center gap-2">
                 <button type="submit" class="w-full md:w-auto px-4 py-2.5 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold text-sm text-white transition whitespace-nowrap">Lọc</button>
                 <a href="/admin/users" class="w-full md:w-auto text-center px-4 py-2.5 bg-gray-700/50 hover:bg-gray-600/50 rounded-lg font-semibold text-sm text-gray-300 transition whitespace-nowrap">Reset</a>
            </div>
        </form>
        <div>
            <button id="hardDeleteSelectedBtn" disabled class="inline-flex items-center px-4 py-2 bg-red-600/80 border border-red-500 rounded-md font-semibold text-sm text-white hover:bg-red-600 transition disabled:opacity-50 disabled:cursor-not-allowed"><i class="ri-delete-bin-fill mr-2"></i> Xóa mục đã chọn</button>
        </div>
    </div>
    <% if (pagination.totalPages > 1) { %>
        <div id="select-all-banner" class="hidden bg-blue-500/20 border border-blue-500/30 text-blue-300 px-4 py-3 rounded-lg text-sm" role="alert">
             Tất cả <strong id="items-on-page-count"></strong> mục trên trang này đã được chọn. <a href="#" id="select-all-matching-items" class="font-bold underline hover:text-white">Chọn tất cả <%= pagination.totalItems %> mục khớp với tìm kiếm này.</a>
        </div>
        <div id="clear-selection-banner" class="hidden bg-blue-500/20 border border-blue-500/30 text-blue-300 px-4 py-3 rounded-lg text-sm" role="alert">
            Tất cả <strong><%= pagination.totalItems %></strong> mục đã được chọn. <a href="#" id="clear-selection" class="font-bold underline hover:text-white">Bỏ chọn.</a>
        </div>
    <% } %>
    <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl">
        <table class="w-full text-sm text-left text-gray-300">
            <thead class="text-xs text-gray-400 uppercase bg-white/5">
                <tr>
                     <th scope="col" class="p-4"><input type="checkbox" id="selectAllCheckbox" class="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-600 focus:ring-2"></th>
                    <th scope="col" class="px-6 py-3">Username</th>
                    <th scope="col" class="px-6 py-3">Email</th>
                     <th scope="col" class="px-6 py-3">Vai trò</th>
                    <th scope="col" class="px-6 py-3">Số dư</th>
                    <th scope="col" class="px-6 py-3">Ngày tạo</th>
                    <th scope="col" class="px-6 py-3 text-right">Hành động</th>
                 </tr>
            </thead>
            <tbody>
                <% users.forEach(user => { %>
                    <tr id="user-row-<%= user._id %>" class="border-b border-white/10 hover:bg-white/5 transition-colors duration-200">
                        <td class="p-4"><input type="checkbox" value="<%= user._id %>" class="item-checkbox w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-600 focus:ring-2"></td>
                        <td class="px-6 py-4 font-medium text-white"><%= user.username %></td>
                         <td class="px-6 py-4 text-gray-400"><%= user.email %></td>
                        <td class="px-6 py-4">
                            <span class="px-2.5 py-1 text-xs font-semibold rounded-full <%= user.role === 'admin' ? 'bg-green-500/20 text-green-400' : 'bg-blue-500/20 text-blue-400' %>">
                                <%= user.role %>
                            </span>
                         </td>
                        <td class="px-6 py-4 font-mono text-yellow-400"><%= user.balance.toLocaleString('vi-VN') %></td>
                        <td class="px-6 py-4 text-gray-400"><%= new Date(user.createdAt).toLocaleString('vi-VN') %></td>
                        <td class="px-6 py-4 text-right">
                            <div class="relative inline-block text-left dropdown-container">
                                <button class="btn-toggle-dropdown p-2 rounded-md hover:bg-white/10 text-gray-400 transition" title="Tùy chọn">
                                    <i class="ri-more-2-fill"></i>
                                </button>
                                <div class="dropdown-menu absolute right-0 top-full mt-2 w-48 bg-gray-800 border border-white/10 rounded-md shadow-lg z-10 hidden p-1">
                                    <a href="#" class="btn-edit-user flex items-center w-full px-3 py-2 text-sm text-gray-300 hover:bg-white/10 rounded" data-id="<%= user._id %>" data-username="<%= user.username %>" data-email="<%= user.email %>" data-role="<%= user.role %>" data-balance="<%= user.balance %>">
                                        <i class="ri-pencil-line w-5 h-5 mr-2"></i>Sửa
                                    </a>
                                    <a href="/admin/activity-logs?searchUser=<%= user.username %>" class="flex items-center w-full px-3 py-2 text-sm text-gray-300 hover:bg-white/10 rounded">
                                         <i class="ri-history-line w-5 h-5 mr-2"></i>Xem nhật ký
                                    </a>
                                    <div class="h-px bg-white/10 my-1"></div>
                                    <a href="#" class="btn-delete-user flex items-center w-full px-3 py-2 text-sm text-red-400 hover:bg-red-500/10 rounded" data-id="<%= user._id %>" data-username="<%= user.username %>">
                                        <i class="ri-delete-bin-line w-5 h-5 mr-2"></i>Xóa
                                    </a>
                                </div>
                            </div>
                        </td>
                    </tr>
                <% }); %>
            </tbody>
        </table>
    </div>

    <% if (pagination.totalPages > 1) { %>
    <nav class="flex justify-center">
        <ul class="inline-flex items-center -space-x-px">
            <% for(let i = 1; i <= pagination.totalPages; i++) { 
                 const query = new URLSearchParams(currentQuery);
                query.set('page', i);
 %>
                <li>
                    <a href="?<%= query.toString() %>" class="px-3 py-2 leading-tight transition-colors duration-200 <%= i === pagination.currentPage ? 'bg-blue-600 text-white border-blue-600' : 'bg-gray-800 text-gray-400 border-gray-700 hover:bg-gray-700 hover:text-white' %> <%= i === 1 ? 'rounded-l-lg' : '' %> <%= i === pagination.totalPages ? 'rounded-r-lg' : '' %>"><%= i %></a>
                </li>
             <% } %>
        </ul>
    </nav>
    <% } %>
    </div>

<div id="modal-backdrop" class="fixed inset-0 bg-gray-950/70 backdrop-blur-sm z-[99] hidden transition-opacity duration-300 ease-in-out opacity-0"></div>

<div id="user-modal" class="modal-container fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-[100] w-full max-w-lg p-4 hidden transform transition-all duration-300 ease-in-out scale-95 opacity-0">
    <div class="bg-gray-900/80 backdrop-blur-xl border border-white/10 rounded-2xl shadow-2xl shadow-black/20">
        <form id="user-form">
            <input type="hidden" id="user-id" name="id">
             <div class="p-6 border-b border-white/10">
                <h3 id="modal-title" class="text-xl font-bold text-white">Thêm User Mới</h3>
            </div>
            <div class="p-6 space-y-4">
                <div>
                    <label for="user-username" class="block text-sm font-medium text-gray-300 mb-2">Username</label>
                    <input type="text" id="user-username" name="username" class="form-input" required>
                </div>
                <div>
                    <label for="user-email" class="block text-sm font-medium text-gray-300 mb-2">Email</label>
                     <input type="email" id="user-email" name="email" class="form-input" required>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="user-role" class="block text-sm font-medium text-gray-300 mb-2">Vai trò</label>
                         <select id="user-role" name="role" class="form-select">
                            <option value="user">User</option>
                            <option value="admin">Admin</option>
                         </select>
                    </div>
                </div>

                <div class="pt-4 border-t border-white/10" id="password-section">
                    <label for="user-password" class="block text-sm font-medium text-gray-300 mb-2">Password</label>
                     <input type="password" id="user-password" name="password" class="form-input">
                    <p id="password-help" class="text-xs text-gray-500 mt-1">Để trống nếu không muốn thay đổi mật khẩu.</p>
                </div>

                <div class="pt-4 border-t border-white/10" id="balance-section">
                    <div>
                         <label for="user-balance" class="block text-sm font-medium text-gray-300 mb-2">Số dư hiện tại</label>
                        <input type="text" id="user-balance" name="balance" class="form-input bg-gray-700/30 cursor-not-allowed" readonly>
                    </div>
                     <div class="mt-4">
                        <label for="balanceAdjustment" class="block text-sm font-medium text-gray-300 mb-2">Cộng/Trừ số dư</label>
                        <input type="number" id="balanceAdjustment" name="balanceAdjustment" class="form-input" value="0" placeholder="Nhập số tiền để cộng hoặc trừ">
                        <p class="text-xs text-gray-500 mt-1">Nhập số dương để cộng tiền, số âm để trừ tiền.</p>
                    </div>
                </div>
                </div>
            <div class="px-6 py-4 bg-white/5 rounded-b-2xl flex justify-end items-center gap-3">
                <button type="button" class="btn-cancel px-4 py-2 bg-gray-700/50 hover:bg-gray-600/50 rounded-lg font-semibold text-sm text-white transition">Hủy</button>
                <button type="submit" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold text-sm text-white transition">Lưu</button>
            </div>
        </form>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // ... (logic hiện tại của trang users.ejs giữ nguyên)
    const backdrop = document.getElementById('modal-backdrop');
    const userModal = document.getElementById('user-modal');

    const showModal = (modalEl) => {
        backdrop.classList.remove('hidden');
        modalEl.classList.remove('hidden');
        setTimeout(() => {
            backdrop.classList.remove('opacity-0');
            modalEl.classList.remove('opacity-0', 'scale-95');
        }, 10);
    };

    const hideModal = (modalEl) => {
        backdrop.classList.add('opacity-0');
        modalEl.classList.add('opacity-0', 'scale-95');
        setTimeout(() => {
            backdrop.classList.add('hidden');
            modalEl.classList.add('hidden');
        }, 300);
    };

    backdrop.addEventListener('click', () => hideModal(userModal));
    userModal.querySelectorAll('.btn-cancel').forEach(btn => {
        btn.addEventListener('click', () => hideModal(userModal));
    });
    const userForm = document.getElementById('user-form');
    const modalTitle = document.getElementById('modal-title');
    const passwordHelp = document.getElementById('password-help');
    const balanceSection = document.getElementById('balance-section');
    document.getElementById('add-user-btn').addEventListener('click', () => {
        userForm.reset();
        userForm.querySelector('#user-id').value = '';
        modalTitle.textContent = 'Thêm User Mới';
        passwordHelp.style.display = 'none';
        balanceSection.style.display = 'none';
        userForm.querySelector('#user-password').setAttribute('required', 'required');
        showModal(userModal);
    });
    document.querySelectorAll('.btn-edit-user').forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.preventDefault();
            const { id, username, email, role, balance } = btn.dataset;
            userForm.reset();
            userForm.querySelector('#user-id').value = id;
            userForm.querySelector('#user-username').value = username;
            userForm.querySelector('#user-email').value = email;
            
            userForm.querySelector('#user-role').value = role;
            userForm.querySelector('#user-balance').value = parseInt(balance, 10).toLocaleString('vi-VN') + 'đ';
            userForm.querySelector('#balanceAdjustment').value = 0;

            modalTitle.textContent = `Sửa User: ${username}`;
            passwordHelp.style.display = 'block';
            balanceSection.style.display = 'block';
            userForm.querySelector('#user-password').removeAttribute('required');
           
             showModal(userModal);
        });
    });
    userForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const id = userForm.querySelector('#user-id').value;
        const url = id ? `/admin/users/update/${id}` : '/admin/users/create';
        const formData = new FormData(userForm);
        const data = Object.fromEntries(formData.entries());

        if (id && !data.password) {
            delete data.password;
        }

      
         try {
            const response = await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            const result 
= await response.json();
            if (result.success) {
                showToast(result.message, 'Thành công!', 'success');
                hideModal(userModal);
                setTimeout(() => window.location.reload(), 1500);
            } else {
                
                showToast(result.message, 'Lỗi!', 'error');
            }
        } catch (error) {
            showToast('Lỗi kết nối server.', 'Lỗi mạng!', 'error');
        }
    });

    const selectAllCheckbox = document.getElementById('selectAllCheckbox');
    const itemCheckboxes = document.querySelectorAll('.item-checkbox');
    const hardDeleteSelectedBtn = document.getElementById('hardDeleteSelectedBtn');
    const selectAllBanner = document.getElementById('select-all-banner');
    const clearSelectionBanner = document.getElementById('clear-selection-banner');
    const selectAllMatchingItemsLink = document.getElementById('select-all-matching-items');
    const clearSelectionLink = document.getElementById('clear-selection');
    const itemsOnPageCountSpan = document.getElementById('items-on-page-count');
    let isSelectAllAcrossPages = false;

    function updateBanners() {
        if (!selectAllBanner) return;
        const allCheckedOnPage = itemCheckboxes.length > 0 && [...itemCheckboxes].every(cb => cb.checked);
        if (isSelectAllAcrossPages) {
            selectAllBanner.classList.add('hidden');
            clearSelectionBanner.classList.remove('hidden');
        } else if (allCheckedOnPage) {
            itemsOnPageCountSpan.textContent = itemCheckboxes.length;
            selectAllBanner.classList.remove('hidden');
            clearSelectionBanner.classList.add('hidden');
        } else {
            selectAllBanner.classList.add('hidden');
            clearSelectionBanner.classList.add('hidden');
        }
    }

    function toggleActionButtons() {
        const anyChecked = [...itemCheckboxes].some(cb => cb.checked) ||
isSelectAllAcrossPages;
        if (hardDeleteSelectedBtn) hardDeleteSelectedBtn.disabled = !anyChecked;
    }

    if (selectAllCheckbox) {
        selectAllCheckbox.addEventListener('change', (e) => {
            isSelectAllAcrossPages = false;
            itemCheckboxes.forEach(cb => cb.checked = e.target.checked);
            toggleActionButtons();
            updateBanners();
        });
    }

    itemCheckboxes.forEach(cb => {
        cb.addEventListener('change', () => {
            isSelectAllAcrossPages = false;
            if (selectAllCheckbox) {
                selectAllCheckbox.checked = [...itemCheckboxes].every(c => c.checked);
            }
            toggleActionButtons();
           
             updateBanners();
        });
    });
    if (selectAllMatchingItemsLink) {
        selectAllMatchingItemsLink.addEventListener('click', (e) => {
            e.preventDefault();
            isSelectAllAcrossPages = true;
            toggleActionButtons();
            updateBanners();
        });
    }

    if(clearSelectionLink) {
        clearSelectionLink.addEventListener('click', (e) => {
            e.preventDefault();
            isSelectAllAcrossPages = false;
            if (selectAllCheckbox) selectAllCheckbox.checked = false;
            itemCheckboxes.forEach(cb => cb.checked = false);
            toggleActionButtons();
            updateBanners();
  
         });
    }
    
    async function handleBulkAction(url, confirmMessage, confirmType = 'warning', selectedIds = []) {
        let payload = {};
        const selectedIdsOnPage = selectedIds.length > 0 ? selectedIds : [...itemCheckboxes].filter(cb => cb.checked).map(cb => cb.value);
        if (isSelectAllAcrossPages) {
            payload = { selectAll: true, filters: <%- JSON.stringify(currentQuery) %> };
        } else {
            if (selectedIdsOnPage.length === 0) {
                showToast('Vui lòng chọn ít nhất một mục.', 'Cảnh báo!', 'warning');
                return;
            };
            payload = { ids: selectedIdsOnPage };
        }
        const totalCount = isSelectAllAcrossPages ?
<%= pagination.totalItems %> : selectedIdsOnPage.length;

        const confirmed = await showConfirm(confirmMessage(totalCount), confirmType);
        if (confirmed) {
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                   
                     body: JSON.stringify(payload)
                });
                const result = await response.json();
                if (result.success) {
                    showToast(result.message, 'Thành công!', 'success');
                    if (payload.selectAll) {
                        setTimeout(() => window.location.reload(), 1000);
                    } else {
                        payload.ids.forEach(id => {
                            const row = document.getElementById(`user-row-${id}`);
                            if (row) row.remove();
           
                         });
                        if (selectAllCheckbox) selectAllCheckbox.checked = false;
                        toggleActionButtons();
                        updateBanners();
                    }
                } else {
                    showToast(result.message || 'Có lỗi xảy ra từ server.', 'Lỗi!', 'error');
                }
            } catch (error) {
                showToast('Lỗi kết nối hoặc phản hồi không hợp lệ.', 'Lỗi!', 'error');
            }
        }
    }
    
    document.querySelectorAll('.btn-delete-user').forEach(btn => {
        btn.addEventListener('click', async (e) => {
            e.preventDefault();
            const { id, username } = btn.dataset;
            handleBulkAction(
                '/admin/users/hard-delete', 
                () => `Bạn 
có chắc muốn XÓA VĨNH VIỄN user "${username}"?`, 
                'danger',
                [id]
            );
        });
    });
    if (hardDeleteSelectedBtn) {
        hardDeleteSelectedBtn.addEventListener('click', () => {
            handleBulkAction(
                '/admin/users/hard-delete', 
                (count) => `HÀNH ĐỘNG NGUY HIỂM!\nBạn có chắc muốn XÓA VĨNH VIỄN ${count} user? Dữ liệu sẽ không thể phục hồi.`, 
                'danger'
     
           );
        });
    }
        
    // Dropdown Logic for action buttons
    document.querySelectorAll('.btn-toggle-dropdown').forEach(button => {
        button.addEventListener('click', (event) => {
            event.stopPropagation();
            const menu = button.nextElementSibling;
            
            document.querySelectorAll('.dropdown-menu').forEach(otherMenu => {
                if (otherMenu !== menu) {
                    otherMenu.classList.add('hidden');
                }
            });

            menu.classList.toggle('hidden');
        });
    });

    document.addEventListener('click', (event) => {
        if (!event.target.closest('.dropdown-container')) {
            document.querySelectorAll('.dropdown-menu').forEach(menu => {
                menu.classList.add('hidden');
            });
        }
    });

    toggleActionButtons();
});
</script>
