<%# zenius95/bm/bm-18b87ac1049dd19288910448b9c11bc5a713fa9c/views/admin/proxies.ejs %>
<% const inTrash = currentQuery.inTrash === 'true' %>

<div class="space-y-8">
    <div>
        <h1 class="text-3xl font-bold text-white"><%= inTrash ? 'Thùng rác - Proxy' : 'Quản Lý Proxy' %></h1>
        <p class="mt-1 text-gray-400">Thêm mới, tìm kiếm và quản lý tất cả proxy.</p>
    </div>

    <% if (!inTrash) { %>
    <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl">
        <div class="px-6 py-4 border-b border-white/10">
            <h3 class="text-lg font-semibold text-white">Thêm Proxy Mới</h3>
        </div>
        <div class="p-6">
            <form id="add-proxy-form">
                <div class="mb-4">
                    <label for="proxyData" class="block text-sm font-medium text-gray-300 mb-2">Nhập danh sách proxy (mỗi proxy một dòng)</label>
                    <textarea class="form-input font-mono" id="proxyData" name="proxyData" rows="6" placeholder="ip:port:user:password (user:password không bắt buộc)"></textarea>
                </div>
                <button type="submit" id="add-proxy-btn" class="inline-flex items-center justify-center px-5 py-2.5 bg-blue-600 border border-transparent rounded-md font-semibold text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 focus:ring-offset-gray-950 transition-transform duration-200 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed">
                    <span class="btn-text"><i class="ri-add-line -ml-1 mr-2"></i>Thêm Proxies</span>
                    <span class="spinner hidden"><i class="ri-loader-4-line animate-spin mr-2"></i>Đang xử lý...</span>
                </button>
            </form>
        </div>
    </div>
    <% } %>

    <div class="flex flex-col md:flex-row items-center justify-between gap-4">
        <form method="GET" action="/admin/proxies" class="flex flex-col md:flex-row items-stretch md:items-center gap-3">
            <% if (inTrash) { %><input type="hidden" name="inTrash" value="true"><% } %>
            <input type="text" name="search" class="form-input" placeholder="Tìm theo proxy, ghi chú..." value="<%= currentQuery.search || '' %>">
            <select name="status" class="form-select">
                <option value="">-- Lọc theo trạng thái --</option>
                <option value="UNCHECKED" <%= currentQuery.status === 'UNCHECKED' ? 'selected' : '' %>>Unchecked</option>
                <option value="AVAILABLE" <%= currentQuery.status === 'AVAILABLE' ? 'selected' : '' %>>Available</option>
                <option value="ASSIGNED" <%= currentQuery.status === 'ASSIGNED' ? 'selected' : '' %>>Assigned</option>
                <option value="DEAD" <%= currentQuery.status === 'DEAD' ? 'selected' : '' %>>Dead</option>
            </select>
            <div class="flex items-center gap-2">
                 <button type="submit" class="w-full md:w-auto px-4 py-2.5 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold text-sm text-white transition whitespace-nowrap">Lọc</button>
                 <a href="/admin/proxies<%= inTrash ? '?inTrash=true' : '' %>" class="w-full md:w-auto text-center px-4 py-2.5 bg-gray-700/50 hover:bg-gray-600/50 rounded-lg font-semibold text-sm text-gray-300 transition whitespace-nowrap">Reset</a>
            </div>
        </form>
        <div>
            <% if (inTrash) { %>
                <a href="/admin/proxies" class="inline-flex items-center px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-md font-semibold text-sm text-white hover:bg-gray-600/50 transition"><i class="ri-arrow-left-line mr-2"></i> Quay lại</a>
                <button id="restoreSelectedBtn" disabled class="inline-flex items-center px-4 py-2 bg-blue-600/80 border border-blue-500 rounded-md font-semibold text-sm text-white hover:bg-blue-600 transition disabled:opacity-50 disabled:cursor-not-allowed"><i class="ri-arrow-go-back-line mr-2"></i> Khôi phục</button>
                <button id="hardDeleteSelectedBtn" disabled class="inline-flex items-center px-4 py-2 bg-red-600/80 border border-red-500 rounded-md font-semibold text-sm text-white hover:bg-red-600 transition disabled:opacity-50 disabled:cursor-not-allowed"><i class="ri-delete-bin-fill mr-2"></i> Xóa vĩnh viễn</button>
            <% } else { %>
                 <a href="/admin/proxies?inTrash=true" class="inline-flex items-center px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-md font-semibold text-sm text-white hover:bg-gray-600/50 transition"><i class="ri-delete-bin-line mr-2"></i> Thùng rác (<span id="trash-count"><%= trashCount %></span>)</a>
                <button id="checkSelectedBtn" disabled class="inline-flex items-center px-4 py-2 bg-green-600/80 border border-green-500 rounded-md font-semibold text-sm text-white hover:bg-green-600 transition disabled:opacity-50 disabled:cursor-not-allowed"><i id="checkSelectedIcon" class="ri-refresh-line mr-2"></i> Check Live</button>
                <button id="softDeleteSelectedBtn" disabled class="inline-flex items-center px-4 py-2 bg-yellow-600/80 border border-yellow-500 rounded-md font-semibold text-sm text-white hover:bg-yellow-600 transition disabled:opacity-50 disabled:cursor-not-allowed"><i class="ri-delete-bin-2-line mr-2"></i> Bỏ vào thùng rác</button>
            <% } %>
        </div>
    </div>
    <% if (pagination.totalPages > 1) { %>
        <div id="select-all-banner" class="hidden bg-blue-500/20 border border-blue-500/30 text-blue-300 px-4 py-3 rounded-lg text-sm" role="alert">
             Tất cả <strong id="items-on-page-count"></strong> mục trên trang này đã được chọn. <a href="#" id="select-all-matching-items" class="font-bold underline hover:text-white">Chọn tất cả <%= pagination.totalItems %> mục khớp với tìm kiếm này.</a>
        </div>
        <div id="clear-selection-banner" class="hidden bg-blue-500/20 border border-blue-500/30 text-blue-300 px-4 py-3 rounded-lg text-sm" role="alert">
            Tất cả <strong><%= pagination.totalItems %></strong> mục đã được chọn. <a href="#" id="clear-selection" class="font-bold underline hover:text-white">Bỏ chọn.</a>
        </div>
    <% } %>
    <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl overflow-hidden">
        <div class="overflow-x-auto">
            <table class="w-full text-sm text-left text-gray-300">
                <thead class="text-xs text-gray-400 uppercase bg-white/5">
                    <tr>
                        <th scope="col" class="p-4"><input type="checkbox" id="selectAllCheckbox" class="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-600 focus:ring-2"></th>
                        <th scope="col" class="px-6 py-3">Proxy</th>
                        <th scope="col" class="px-6 py-3">Trạng thái</th>
                        <%# === START: THAY ĐỔI QUAN TRỌNG === %>
                        <th scope="col" class="px-6 py-3">Account đang dùng</th>
                        <%# === END: THAY ĐỔI QUAN TRỌNG === %>
                        <th scope="col" class="px-6 py-3">Ghi chú</th>
                        <th scope="col" class="px-6 py-3"><%= inTrash ? 'Ngày Xóa' : 'Check Lần Cuối' %></th>
                        <th scope="col" class="px-6 py-3 text-right">Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (proxies && proxies.length > 0) { %>
                        <% proxies.forEach(proxy => { %>
                            <tr id="proxy-row-<%= proxy._id %>" class="border-b border-white/10 hover:bg-white/5 transition-colors duration-200">
                                <td class="p-4"><input type="checkbox" value="<%= proxy._id %>" class="item-checkbox w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-600 focus:ring-2"></td>
                                <td class="px-6 py-4 font-mono text-white"><%= proxy.proxyString %></td>
                                <td class="px-6 py-4">
                                   <% 
                                        let statusClass = 'bg-gray-700 text-gray-300';
                                        if (proxy.status === 'AVAILABLE') statusClass = 'bg-green-500/20 text-green-400';
                                        if (proxy.status === 'ASSIGNED') statusClass = 'bg-yellow-500/20 text-yellow-400';
                                        if (proxy.status === 'DEAD') statusClass = 'bg-red-500/20 text-red-400';
                                        if (proxy.status === 'UNCHECKED') statusClass = 'bg-gray-500/20 text-gray-300';
                                    %>
                                    <div class="flex items-center">
                                        <i id="spinner-<%= proxy._id %>" class="ri-loader-4-line animate-spin text-yellow-400 mr-2" style="display: <%= proxy.status === 'CHECKING' ? 'inline-block' : 'none' %>;"></i>
                                        <% if (inTrash) { %>
                                            <span class="px-2.5 py-1 text-xs font-semibold rounded-full bg-gray-700 text-gray-300">DELETED</span>
                                        <% } else { %>
                                            <span id="status-<%= proxy._id %>" class="px-2.5 py-1 text-xs font-semibold rounded-full <%= statusClass %>" style="display: <%= proxy.status === 'CHECKING' ? 'none' : 'inline-block' %>;">
                                                <%= proxy.status %>
                                            </span>
                                        <% } %>
                                    </div>
                                </td>
                                <%# === START: THAY ĐỔI QUAN TRỌNG === %>
                                <td class="px-6 py-4 text-gray-400">
                                    <% if (proxy.assignedTo && proxy.assignedTo.uid) { %>
                                        <span class="font-semibold text-white"><%= proxy.assignedTo.uid %></span>
                                    <% } else { %>
                                        N/A
                                    <% } %>
                                </td>
                                <%# === END: THAY ĐỔI QUAN TRỌNG === %>
                                <td class="px-6 py-4 text-gray-400"><%= proxy.notes || 'N/A' %></td>
                                <td id="lastChecked-<%= proxy._id %>" class="px-6 py-4 text-gray-400">
                                    <% if (inTrash && proxy.deletedAt) { %>
                                        <%= new Date(proxy.deletedAt).toLocaleString('vi-VN') %>
                                    <% } else if (!inTrash && proxy.lastCheckedAt) { %>
                                        <%= new Date(proxy.lastCheckedAt).toLocaleString('vi-VN') %>
                                    <% } else if (!inTrash) { %>
                                        Chưa check
                                    <% } %>
                                </td>
                                <td class="px-6 py-4 text-right">
                                    <% if (!inTrash) { %>
                                    <button class="btn-edit-proxy p-2 rounded-md hover:bg-white/10 text-gray-400 transition" title="Sửa"
                                            data-id="<%= proxy._id %>"
                                            data-proxy-string="<%- proxy.proxyString %>"
                                            data-status="<%= proxy.status %>"
                                            data-notes="<%- proxy.notes || '' %>">
                                        <i class="ri-pencil-line"></i>
                                    </button>
                                    <% } %>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <%# === START: THAY ĐỔI QUAN TRỌNG (colspan) === %>
                            <td colspan="8" class="text-center py-16 px-6">
                            <%# === END: THAY ĐỔI QUAN TRỌNG === %>
                                <i class="ri-database-2-line text-6xl text-gray-700"></i>
                                <h4 class="mt-4 text-xl font-semibold text-white"><%= inTrash ? 'Thùng rác trống' : 'Chưa có proxy nào' %></h4>
                                <p class="mt-2 text-gray-400"><%= inTrash ? 'Không có proxy nào trong thùng rác.' : 'Hãy bắt đầu bằng cách thêm proxy đầu tiên.' %></p>
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>
    <%- include('../partials/_pagination.ejs', { pagination, currentQuery }) %>
</div>

<%# ... (phần còn lại của file giữ nguyên) ... %>

<div id="edit-proxy-modal" class="modal-container fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-[100] w-full max-w-lg p-4 hidden transform transition-all duration-300 ease-in-out scale-95 opacity-0">
    <div class="bg-gray-900/80 backdrop-blur-xl border border-white/10 rounded-2xl shadow-2xl shadow-black/20">
        <form id="edit-proxy-form">
            <input type="hidden" id="edit-proxy-id" name="id">
            <div class="p-6 border-b border-white/10"><h3 class="text-xl font-bold text-white">Chỉnh Sửa Proxy</h3></div>
            <div class="p-6 space-y-4">
                <div>
                    <label for="edit-proxyString" class="block text-sm font-medium text-gray-300 mb-2">Proxy</label>
                    <input type="text" id="edit-proxyString" name="proxyString" class="form-input font-mono" required>
                </div>
                <div>
                    <label for="edit-status" class="block text-sm font-medium text-gray-300 mb-2">Trạng thái</label>
                    <select id="edit-status" name="status" class="form-select">
                        <option value="UNCHECKED">Unchecked</option>
                        <option value="AVAILABLE">Available</option>
                        <option value="ASSIGNED">Assigned</option>
                        <option value="DEAD">Dead</option>
                    </select>
                </div>
                <div>
                    <label for="edit-notes" class="block text-sm font-medium text-gray-300 mb-2">Ghi chú</label>
                    <input type="text" id="edit-notes" name="notes" class="form-input">
                </div>
            </div>
            <div class="px-6 py-4 bg-white/5 rounded-b-2xl flex justify-end items-center gap-3">
                <button type="button" class="btn-cancel px-4 py-2 bg-gray-700/50 hover:bg-gray-600/50 rounded-lg font-semibold text-sm text-white transition">Hủy</button>
                <button type="submit" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold text-sm text-white transition">Lưu Thay Đổi</button>
            </div>
        </form>
    </div>
</div>

<div id="modal-backdrop" class="fixed inset-0 bg-gray-950/70 backdrop-blur-sm z-[99] hidden transition-opacity duration-300 ease-in-out opacity-0"></div>

<script src="/socket.io/socket.io.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    // Modal handling
    const backdrop = document.getElementById('modal-backdrop');
    const showModal = (modalEl) => {
        backdrop.classList.remove('hidden');
        modalEl.classList.remove('hidden');
        setTimeout(() => {
            backdrop.classList.remove('opacity-0');
            modalEl.classList.remove('opacity-0', 'scale-95');
        }, 10);
    };
    const hideModal = (modalEl) => {
        if (!modalEl) return;
        backdrop.classList.add('opacity-0');
        modalEl.classList.add('opacity-0', 'scale-95');
        setTimeout(() => {
            backdrop.classList.add('hidden');
            modalEl.classList.add('hidden');
        }, 300);
    };
    backdrop.addEventListener('click', () => document.querySelectorAll('.modal-container').forEach(hideModal));
    document.querySelectorAll('.btn-cancel').forEach(btn => btn.addEventListener('click', () => hideModal(btn.closest('.modal-container'))));
    // Add Proxy Form
    const addProxyForm = document.getElementById('add-proxy-form');
    if (addProxyForm) {
        const addProxyBtn = document.getElementById('add-proxy-btn');
        addProxyForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            addProxyBtn.disabled = true;
            addProxyBtn.querySelector('.btn-text').classList.add('hidden');
            addProxyBtn.querySelector('.spinner').classList.remove('hidden');
            const data = { proxyData: document.getElementById('proxyData').value };
            try {
                 const response = await fetch('/admin/proxies/create', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                if (result.success) {
                    showToast(result.message, 'Thành công!', 'success');
                    addProxyForm.reset();
                    setTimeout(() => window.location.reload(), 1500);
                } else {
                    showToast(result.message, 'Có lỗi!', 'error');
                }
            } catch (error) {
                showToast('Không thể kết nối đến server.', 'Lỗi mạng!', 'error');
            } finally {
                addProxyBtn.disabled = false;
                addProxyBtn.querySelector('.btn-text').classList.remove('hidden');
                addProxyBtn.querySelector('.spinner').classList.add('hidden');
            }
        });
    }

    // Edit Proxy Modal
    const editProxyModal = document.getElementById('edit-proxy-modal');
    document.querySelectorAll('.btn-edit-proxy').forEach(btn => {
        btn.addEventListener('click', () => {
            const { id, proxyString, status, notes } = btn.dataset;
            const form = document.getElementById('edit-proxy-form');
            form.querySelector('#edit-proxy-id').value = id;
            form.querySelector('#edit-proxyString').value = proxyString;
            form.querySelector('#edit-status').value = status;
            form.querySelector('#edit-notes').value = notes;
            showModal(editProxyModal);
        });
    });
    document.getElementById('edit-proxy-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = e.target;
        const id = form.querySelector('#edit-proxy-id').value;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        try {
            const response = await fetch(`/admin/proxies/update/${id}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            const result = await response.json();
            if (result.success) {
                showToast(result.message, 'Thành công!', 'success');
                hideModal(editProxyModal);
                setTimeout(() => window.location.reload(), 1500);
            } else {
                showToast(result.message, 'Có lỗi!', 'error');
            }
        } catch (error) {
             showToast('Không thể kết nối đến server.', 'Lỗi mạng!', 'error');
        }
    });
    // Bulk actions logic
    const selectAllCheckbox = document.getElementById('selectAllCheckbox');
    const itemCheckboxes = document.querySelectorAll('.item-checkbox');
    const hardDeleteSelectedBtn = document.getElementById('hardDeleteSelectedBtn');
    const softDeleteSelectedBtn = document.getElementById('softDeleteSelectedBtn');
    const restoreSelectedBtn = document.getElementById('restoreSelectedBtn');
    const checkSelectedBtn = document.getElementById('checkSelectedBtn');
    const checkSelectedIcon = document.getElementById('checkSelectedIcon');
    const selectAllBanner = document.getElementById('select-all-banner');
    const clearSelectionBanner = document.getElementById('clear-selection-banner');
    const selectAllMatchingItemsLink = document.getElementById('select-all-matching-items');
    const clearSelectionLink = document.getElementById('clear-selection');
    const itemsOnPageCountSpan = document.getElementById('items-on-page-count');
    let isSelectAllAcrossPages = false;
    let isCheckProxyRunning = false;

    function updateBanners() {if (!selectAllBanner) return;const allCheckedOnPage = itemCheckboxes.length > 0 && [...itemCheckboxes].every(cb => cb.checked);if (isSelectAllAcrossPages) {selectAllBanner.classList.add('hidden');clearSelectionBanner.classList.remove('hidden');} else if (allCheckedOnPage) {itemsOnPageCountSpan.textContent = itemCheckboxes.length;selectAllBanner.classList.remove('hidden');clearSelectionBanner.classList.add('hidden');} else {selectAllBanner.classList.add('hidden');clearSelectionBanner.classList.add('hidden');}}
    
    function toggleActionButtons() {
        const anyChecked = [...itemCheckboxes].some(cb => cb.checked) || isSelectAllAcrossPages;
        if (hardDeleteSelectedBtn) hardDeleteSelectedBtn.disabled = !anyChecked;
        if (softDeleteSelectedBtn) softDeleteSelectedBtn.disabled = !anyChecked;
        if (restoreSelectedBtn) restoreSelectedBtn.disabled = !anyChecked;
        if (isCheckProxyRunning) {
            if(checkSelectedBtn) checkSelectedBtn.disabled = true;
            if(checkSelectedIcon) checkSelectedIcon.classList.add('animate-spin');
        } else {
            if(checkSelectedBtn) checkSelectedBtn.disabled = !anyChecked;
            if(checkSelectedIcon) checkSelectedIcon.classList.remove('animate-spin');
        }
    }

    if(selectAllCheckbox){selectAllCheckbox.addEventListener('change', (e) => {isSelectAllAcrossPages = false;itemCheckboxes.forEach(cb => cb.checked = e.target.checked);toggleActionButtons();updateBanners();});}
    itemCheckboxes.forEach(cb => {cb.addEventListener('change', () => {isSelectAllAcrossPages = false;if(selectAllCheckbox) selectAllCheckbox.checked = [...itemCheckboxes].every(c => c.checked);toggleActionButtons();updateBanners();});});
    if(selectAllMatchingItemsLink){selectAllMatchingItemsLink.addEventListener('click', (e) => {e.preventDefault();isSelectAllAcrossPages = true;toggleActionButtons();updateBanners();});}
    if(clearSelectionLink){clearSelectionLink.addEventListener('click', (e) => {e.preventDefault();isSelectAllAcrossPages = false;if (selectAllCheckbox) selectAllCheckbox.checked = false;itemCheckboxes.forEach(cb => cb.checked = false);toggleActionButtons();updateBanners();});}
    toggleActionButtons();
    async function handleBulkAction(url, confirmMessage, confirmType = 'warning') {
        let payload = {};
        const selectedIdsOnPage = [...itemCheckboxes].filter(cb => cb.checked).map(cb => cb.value);
        if (isSelectAllAcrossPages) {
            payload = { selectAll: true, filters: <%- JSON.stringify(currentQuery) %> };
        } else {
            if (selectedIdsOnPage.length === 0) {
                return showToast('Vui lòng chọn ít nhất một mục.', 'Cảnh báo!', 'warning');
            };
            payload = { ids: selectedIdsOnPage };
        }
        const totalCount = isSelectAllAcrossPages ? <%= pagination.totalItems %> : selectedIdsOnPage.length;

        const confirmed = await showConfirm(confirmMessage(totalCount), confirmType);
        if (confirmed) {
            if (url.includes('check-selected')) {
                isCheckProxyRunning = true;
                toggleActionButtons();
            }
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();
                if (result.success) {
                    showToast(result.message, 'Thành công!', 'success');
                    if (!url.includes('check-selected')) {
                        setTimeout(() => window.location.reload(), 1000);
                    }
                } else {
                    showToast(result.message || 'Có lỗi xảy ra.', 'Lỗi!', 'error');
                    if (url.includes('check-selected')) {
                        isCheckProxyRunning = false;
                        toggleActionButtons();
                    }
                }
            } catch (error) {
                showToast('Lỗi kết nối.', 'Lỗi mạng!', 'error');
                if (url.includes('check-selected')) {
                    isCheckProxyRunning = false;
                    toggleActionButtons();
                }
            }
        }
    }
    
    if (hardDeleteSelectedBtn) {
        hardDeleteSelectedBtn.addEventListener('click', () => {
             handleBulkAction('/admin/proxies/hard-delete', (count) => `Bạn có chắc muốn XÓA VĨNH VIỄN ${count} proxy?`, 'danger');
        });
    }

    if (softDeleteSelectedBtn) {
        softDeleteSelectedBtn.addEventListener('click', () => {
            handleBulkAction('/admin/proxies/soft-delete', (count) => `Bạn có chắc muốn chuyển ${count} proxy vào thùng rác?`);
        });
    }
    
    if (restoreSelectedBtn) {
        restoreSelectedBtn.addEventListener('click', () => {
            handleBulkAction('/admin/proxies/restore', (count) => `Bạn có chắc muốn khôi phục ${count} proxy?`, 'info');
        });
    }

    if (checkSelectedBtn) {
        checkSelectedBtn.addEventListener('click', () => {
             handleBulkAction('/admin/proxies/check-selected', (count) => `Bắt đầu tiến trình kiểm tra ${count} proxy?`, 'info');
        });
    }
    
    // Socket.IO listeners
    const socket = io();
    socket.on('proxy:update', (data) => {
        const { id, status, lastCheckedAt } = data;
        const row = document.getElementById(`proxy-row-${id}`);
        if (!row) return;

        const statusBadge = row.querySelector(`#status-${id}`);
        const spinner = row.querySelector(`#spinner-${id}`);
        const lastCheckedCell = row.querySelector(`#lastChecked-${id}`);

        const isChecking = status === 'CHECKING';
        spinner.style.display = isChecking ? 'inline-block' : 'none';
        statusBadge.style.display = isChecking ? 'none' : 'inline-block';
     
        if (!isChecking) {
            statusBadge.textContent = status;
            let statusClass = 'bg-gray-700 text-gray-300';
            if (status === 'AVAILABLE') statusClass = 'bg-green-500/20 text-green-400';
            if (status === 'ASSIGNED') statusClass = 'bg-yellow-500/20 text-yellow-400';
            if (status === 'DEAD') statusClass = 'bg-red-500/20 text-red-400';
            if (status === 'UNCHECKED') statusClass = 'bg-gray-500/20 text-gray-300';
            statusBadge.className = `px-2.5 py-1 text-xs font-semibold rounded-full ${statusClass}`;
        }
        if (lastCheckedCell && lastCheckedAt) {
            lastCheckedCell.textContent = lastCheckedAt;
        }
    });

    socket.on('checkproxy:end', () => {
        isCheckProxyRunning = false;
        toggleActionButtons();
        showToast('Tiến trình kiểm tra proxy đã hoàn tất!', 'Hoàn thành', 'success');
    });
    socket.on('proxy:trashed', (data) => {
        const { id, message } = data;
        const row = document.getElementById(`proxy-row-${id}`);
        if (row) {
            row.remove();
            showToast(message, 'Thông báo', 'warning');
        }
    });
    socket.on('proxies:trash:update', (data) => {
        const trashCountSpan = document.getElementById('trash-count');
        if (trashCountSpan) {
            trashCountSpan.textContent = data.newTrashCount;
        }
    });
});
</script>