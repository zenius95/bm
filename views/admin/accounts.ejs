<% const inTrash = currentQuery.inTrash === 'true' %>

<div class="space-y-8">
    <div>
        <h1 class="text-3xl font-bold text-white"><%= inTrash ?
 'Thùng rác - Account' : 'Quản Lý Account' %></h1>
        <p class="mt-1 text-gray-400">Thêm mới, tìm kiếm và quản lý tất cả account của Bro.</p>
    </div>
    
    <% if (currentQuery.error) { %>
        <div class="bg-red-500/20 border border-red-500/30 text-red-300 px-4 py-3 rounded-lg relative" role="alert">
            <strong class="font-bold">Đã xảy ra lỗi!</strong>
            <span class="block sm:inline"><%= decodeURIComponent(currentQuery.error) %></span>
      
           </div>
    <% } %>
    <% if (currentQuery.success) { %>
         <div class="bg-green-500/20 border border-green-500/30 text-green-300 px-4 py-3 rounded-lg relative" role="alert">
            <strong class="font-bold">Thành công!</strong>
            <span class="block sm:inline"><%= decodeURIComponent(currentQuery.success) %></span>
        </div>
    <% } %>

    <% if (!inTrash) { %>
    <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl">
     
       <div class="px-6 py-4 border-b border-white/10">
            <h3 class="text-lg font-semibold text-white">Thêm Account Mới</h3>
        </div>
        <div class="p-6">
            <form id="add-accounts-form">
                <div class="mb-4">
                    <label for="accountsData" class="block text-sm font-medium text-gray-300 mb-2">Nhập danh sách 
 account (mỗi account một dòng)</label>
                    <textarea class="form-input font-mono" id="accountsData" name="accountsData" rows="6" placeholder="uid|password|2fa|email (email không bắt buộc)"></textarea>
                </div>
                <button type="submit" id="add-accounts-btn" class="inline-flex items-center justify-center px-5 py-2.5 bg-blue-600 border border-transparent rounded-md font-semibold text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 focus:ring-offset-gray-950 transition-transform duration-200 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed">
          
                     <span class="btn-text"><i class="ri-add-line -ml-1 mr-2"></i>Thêm Accounts</span>
                    <span class="spinner hidden"><i class="ri-loader-4-line animate-spin mr-2"></i>Đang xử lý...</span>
                </button>
            </form>
        </div>
    </div>
    <% } %>

    <div class="flex flex-col md:flex-row items-center justify-between gap-4">
  
           <form method="GET" action="/admin/accounts" class="flex flex-col md:flex-row items-stretch md:items-center gap-3">
            <% if (inTrash) { %><input type="hidden" name="inTrash" value="true"><% } %>
            <input type="text" name="search" class="form-input" placeholder="Tìm theo Username, Proxy..." value="<%= currentQuery.search ||
 '' %>">
            <select name="status" class="form-select">
                <option value="">-- Lọc theo trạng thái --</option>
                <option value="UNCHECKED" <%= currentQuery.status === 'UNCHECKED' ? 'selected' : '' %>>Unchecked</option>
                <option value="LIVE" <%= currentQuery.status === 'LIVE' ? 'selected' : '' %>>Live</option>
           
                 <option value="DIE" <%= currentQuery.status === 'DIE' ? 'selected' : '' %>>Die</option>
                <option value="CHECKING" <%= currentQuery.status === 'CHECKING' ? 'selected' : '' %>>Checking</option>
                <option value="ERROR" <%= currentQuery.status === 'ERROR' ? 'selected' : '' %>>Error</option>
                <option value="IN_USE" <%= currentQuery.status === 'IN_USE' ? 'selected' : '' %>>In Use</option>
                <option value="RESTING" <%= currentQuery.status === 'RESTING' ? 'selected' : '' %>>Resting</option>
      
             </select>
             <div class="flex items-center gap-2">
                <button type="submit" class="w-full md:w-auto px-4 py-2.5 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold text-sm text-white transition whitespace-nowrap">Lọc</button>
                 <a href="/admin/accounts<%= inTrash ?
 '?inTrash=true' : '' %>" class="w-full md:w-auto text-center px-4 py-2.5 bg-gray-700/50 hover:bg-gray-600/50 rounded-lg font-semibold text-sm text-gray-300 transition whitespace-nowrap">Reset</a>
            </div>
        </form>
        <div>
            <% if (inTrash) { %>
                <a href="/admin/accounts" class="inline-flex items-center px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-md font-semibold text-sm text-white hover:bg-gray-600/50 transition"><i class="ri-arrow-left-line mr-2"></i> Quay lại</a>
      
                     <button id="restoreSelectedBtn" disabled class="inline-flex items-center px-4 py-2 bg-blue-600/80 border border-blue-500 rounded-md font-semibold text-sm text-white hover:bg-blue-600 transition disabled:opacity-50 disabled:cursor-not-allowed"><i class="ri-arrow-go-back-line mr-2"></i> Khôi phục</button>
                <button id="hardDeleteSelectedBtn" disabled class="inline-flex items-center px-4 py-2 bg-red-600/80 border border-red-500 rounded-md font-semibold text-sm text-white hover:bg-red-600 transition disabled:opacity-50 disabled:cursor-not-allowed"><i class="ri-delete-bin-fill mr-2"></i> Xóa vĩnh viễn</button>
            <% } else { %>
               
                 <a href="/admin/accounts?inTrash=true" class="inline-flex items-center px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-md font-semibold text-sm text-white hover:bg-gray-600/50 transition"><i class="ri-delete-bin-line mr-2"></i> Thùng rác (<span id="trash-count"><%= trashCount %></span>)</a>
                <button id="checkSelectedBtn" disabled class="inline-flex items-center px-4 py-2 bg-green-600/80 border border-green-500 rounded-md font-semibold text-sm text-white hover:bg-green-600 transition disabled:opacity-50 disabled:cursor-not-allowed"><i id="checkSelectedIcon" class="ri-refresh-line mr-2"></i> Check Live</button>
                <button id="softDeleteSelectedBtn" disabled class="inline-flex items-center px-4 py-2 bg-yellow-600/80 border border-yellow-500 rounded-md font-semibold text-sm text-white hover:bg-yellow-600 transition disabled:opacity-50 disabled:cursor-not-allowed"><i class="ri-delete-bin-2-line mr-2"></i> Bỏ vào thùng 
 rác</button>
            <% } %>
        </div>
    </div>
    
    <% if (pagination.totalPages > 1) { %>
        <div id="select-all-banner" class="hidden bg-blue-500/20 border border-blue-500/30 text-blue-300 px-4 py-3 rounded-lg text-sm" role="alert">
            Tất cả <strong id="items-on-page-count"></strong> mục trên trang này đã được chọn.
            <a href="#" id="select-all-matching-items" class="font-bold underline hover:text-white">Chọn tất cả <%= pagination.totalItems %> mục khớp với tìm kiếm này.</a>
        </div>
        <div id="clear-selection-banner" class="hidden bg-blue-500/20 border border-blue-500/30 text-blue-300 px-4 py-3 rounded-lg text-sm" role="alert">
            Tất cả <strong><%= pagination.totalItems %></strong> mục đã được chọn.
            <a href="#" id="clear-selection" class="font-bold underline hover:text-white">Bỏ chọn.</a>
        </div>
    <% } %>

    <div class="bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl overflow-hidden">
         <% if (accounts && accounts.length > 0) { %>
        <div class="overflow-x-auto">
            <table class="w-full text-sm text-left text-gray-300">
                <thead class="text-xs text-gray-400 uppercase bg-white/5">
        
                     <tr>
                        <th scope="col" class="p-4"><input type="checkbox" id="selectAllCheckbox" class="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-600 focus:ring-2"></th>
                        <th scope="col" class="px-6 py-3">Username</th>
                        <th scope="col" class="px-6 py-3">Mật khẩu</th>
                        <th scope="col" class="px-6 py-3">Proxy</th>
                        <th scope="col" class="px-6 py-3">Trạng Thái</th>
                        <th scope="col" class="px-6 py-3 text-center">Success</th>
                        <th scope="col" class="px-6 py-3 text-center">Error</th>
                        <th scope="col" class="px-6 py-3 text-center">Check Lỗi</th>
                        <th scope="col" class="px-6 py-3"><%= inTrash ? 'Ngày Xóa' : 'Lần check cuối' %></th>
                    </tr>
                </thead>
                <tbody>
                    <% accounts.forEach(account => { %>
                  
                       <%
                            let statusClass = 'bg-gray-700 text-gray-300';
                            if (account.status === 'LIVE') statusClass = 'bg-green-500/20 text-green-400';
                           
                             if (account.status === 'DIE' || account.status === 'ERROR') statusClass = 'bg-red-500/20 text-red-400';
                            if (account.status === 'IN_USE') statusClass = 'bg-purple-500/20 text-purple-400';
                            if (account.status === 'RESTING') statusClass = 'bg-blue-500/20 text-blue-400';
                        %>
                        <tr id="account-row-<%= account._id %>" class="border-b 
 border-white/10 hover:bg-white/5 transition-colors duration-200">
                            <td class="p-4"><input type="checkbox" value="<%= account._id %>" class="item-checkbox w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-600 focus:ring-2"></td>
                            <td class="px-6 py-4 font-medium text-white"><%= account.uid %></td>
                            <td class="px-6 py-4 font-medium text-white"><%= account.password %></td>
                     
                             <td id="proxy-cell-<%= account._id %>" class="px-6 py-4 text-gray-400 font-mono"><%= account.proxy || 'N/A' %></td>
                            <td class="px-6 py-4">
                                <div class="flex items-center">
                                   
                                     <i id="spinner-<%= account._id %>" class="ri-loader-4-line animate-spin text-yellow-400 mr-2" style="display: <%= account.status === 'CHECKING' ? 'inline-block' : 'none' %>;"></i>
                                    <% if (inTrash) { %>
                                        <span class="px-2.5 
 py-1 text-xs font-semibold rounded-full bg-gray-700 text-gray-300">DELETED</span>
                                    <% } else { %>
                                        <span id="status-<%= account._id %>" class="px-2.5 py-1 text-xs font-semibold rounded-full <%= statusClass %>" style="display: <%= account.status 
 === 'CHECKING' ? 'none' : 'inline-block' %>;">
                                            <%= account.status %>
                                        </span>
        
                                     <% } %>
                                </div>
                            </td>
                            <td class="px-6 py-4 text-center font-semibold text-green-400"><%= account.successCount || 0 %></td>
                            <td class="px-6 py-4 text-center font-semibold text-red-400"><%= account.errorCount || 0 %></td>
                            <td class="px-6 py-4 text-center font-semibold text-red-400"><%= account.dieStreak || 0 %></td>
                            <td id="lastUsed-<%= account._id %>" class="px-6 
 py-4 text-gray-400">
                                <% if (inTrash && account.deletedAt) { %>
                                    <%= new Date(account.deletedAt).toLocaleString('vi-VN') %>
                      
                         <% } else if (!inTrash && account.lastCheckedAt) { %>
                                    <%= new Date(account.lastCheckedAt).toLocaleString('vi-VN') %>
                                <% } else if (!inTrash) { %>
     
                                     Chưa check
                                <% } %>
                            </td>
      
                       </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
        <% } else { %>
            
             <div class="text-center py-16 px-6">
                <i class="ri-user-search-line text-6xl text-gray-700"></i>
                <h4 class="mt-4 text-xl font-semibold text-white">Không tìm thấy account nào</h4>
                <p class="mt-2 text-gray-400"><%= inTrash ?
 'Thùng rác trống.' : 'Hãy thử thay đổi bộ lọc hoặc thêm account mới.'
 %></p>
            </div>
        <% } %>
    </div>
    
    <%- include('../partials/_pagination.ejs', { pagination, currentQuery }) %>
</div>
<script src="/socket.io/socket.io.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const addAccountsForm = document.getElementById('add-accounts-form');
    if (addAccountsForm) {
        const addAccountsBtn = document.getElementById('add-accounts-btn');
        addAccountsForm.addEventListener('submit', async (e) => {
            e.preventDefault();
        
             addAccountsBtn.disabled = true;
            addAccountsBtn.querySelector('.btn-text').classList.add('hidden');
            addAccountsBtn.querySelector('.spinner').classList.remove('hidden');
            try {
                const response = await fetch('/admin/accounts/add-multiple', {
                    method: 'POST',
               
                     headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ accountsData: document.getElementById('accountsData').value })
                });
                const result = await response.json();
                if (response.ok && result.success) {
                    showToast(result.message, 'Thành công!', 'success');
                    addAccountsForm.reset();
                    setTimeout(() => {
                        const url = new URL(window.location);
                        url.searchParams.delete('error');
                        url.searchParams.delete('success');
                     
                       window.location.href = url.toString();
                    }, 1000);
                } else {
                    showToast(result.message, `Lỗi (Code: ${response.status})`, 'error');
                }
            } catch (error) {
                showToast('Không thể kết nối đến server.', 'Lỗi mạng!', 'error');
            } finally {
                addAccountsBtn.disabled = false;
                addAccountsBtn.querySelector('.btn-text').classList.remove('hidden');
                addAccountsBtn.querySelector('.spinner').classList.add('hidden');
            }
        });
    }

    const selectAllCheckbox = document.getElementById('selectAllCheckbox');
    const itemCheckboxes = document.querySelectorAll('.item-checkbox');
    const checkSelectedBtn = document.getElementById('checkSelectedBtn');
    const checkSelectedIcon = document.getElementById('checkSelectedIcon');
    const softDeleteSelectedBtn = document.getElementById('softDeleteSelectedBtn');
    const restoreSelectedBtn = document.getElementById('restoreSelectedBtn');
    const hardDeleteSelectedBtn = document.getElementById('hardDeleteSelectedBtn');
    const selectAllBanner = document.getElementById('select-all-banner');
    const clearSelectionBanner = document.getElementById('clear-selection-banner');
    const selectAllMatchingItemsLink = document.getElementById('select-all-matching-items');
    const clearSelectionLink = document.getElementById('clear-selection');
    const itemsOnPageCountSpan = document.getElementById('items-on-page-count');
    let isSelectAllAcrossPages = false;
    let isCheckLiveRunning = false;
    function updateBanners() {
        if (!selectAllBanner) return;
        const allCheckedOnPage = itemCheckboxes.length > 0 && [...itemCheckboxes].every(cb => cb.checked);
        if (isSelectAllAcrossPages) {
            selectAllBanner.classList.add('hidden');
            clearSelectionBanner.classList.remove('hidden');
        } else if (allCheckedOnPage) {
            itemsOnPageCountSpan.textContent = itemCheckboxes.length;
            selectAllBanner.classList.remove('hidden');
            clearSelectionBanner.classList.add('hidden');
        } else {
            selectAllBanner.classList.add('hidden');
            clearSelectionBanner.classList.add('hidden');
        }
    }

    function updateCheckLiveButtonState() {
        if (!checkSelectedBtn) return;
        if (isCheckLiveRunning) {
            checkSelectedBtn.disabled = true;
            if(checkSelectedIcon) checkSelectedIcon.classList.add('animate-spin');
        } else {
            const anyChecked = [...itemCheckboxes].some(cb => cb.checked) ||
 isSelectAllAcrossPages;
            checkSelectedBtn.disabled = !anyChecked;
            if(checkSelectedIcon) checkSelectedIcon.classList.remove('animate-spin');
        }
    }

    function toggleActionButtons() {
        const anyChecked = [...itemCheckboxes].some(cb => cb.checked) ||
 isSelectAllAcrossPages;
        updateCheckLiveButtonState();
        if (softDeleteSelectedBtn) softDeleteSelectedBtn.disabled = !anyChecked;
        if (restoreSelectedBtn) restoreSelectedBtn.disabled = !anyChecked;
        if (hardDeleteSelectedBtn) hardDeleteSelectedBtn.disabled = !anyChecked;
    }

    if(selectAllCheckbox) {
        selectAllCheckbox.addEventListener('change', (e) => {
            isSelectAllAcrossPages = false;
            itemCheckboxes.forEach(cb => cb.checked = e.target.checked);
            toggleActionButtons();
            updateBanners();
        });
    }

    itemCheckboxes.forEach(cb => {
        cb.addEventListener('change', () => {
            isSelectAllAcrossPages = false;
            if(selectAllCheckbox) selectAllCheckbox.checked = [...itemCheckboxes].every(c => c.checked);
            toggleActionButtons();
            updateBanners();
        });
    });
    if (selectAllMatchingItemsLink) {
        selectAllMatchingItemsLink.addEventListener('click', (e) => {
            e.preventDefault();
            isSelectAllAcrossPages = true;
            toggleActionButtons();
            updateBanners();
        });
    }

    if(clearSelectionLink) {
        clearSelectionLink.addEventListener('click', (e) => {
            e.preventDefault();
            isSelectAllAcrossPages = false;
            if (selectAllCheckbox) selectAllCheckbox.checked = false;
            itemCheckboxes.forEach(cb => cb.checked = false);
            toggleActionButtons();
            updateBanners();
  
             });
    }
    
    async function handleAction(url, confirmMessage, confirmType = 'warning') {
        let payload = {};
        const selectedIdsOnPage = [...itemCheckboxes].filter(cb => cb.checked).map(cb => cb.value);

        if (isSelectAllAcrossPages) {
            payload = { selectAll: true, filters: <%- JSON.stringify(currentQuery) %> };
        } else {
            if (selectedIdsOnPage.length === 0) {
                showToast('Vui lòng chọn ít nhất một mục.', 'Cảnh báo!', 'warning');
                return;
            };
            payload = { ids: selectedIdsOnPage };
        }
        const totalCount = isSelectAllAcrossPages ?
 <%= pagination.totalItems %> : selectedIdsOnPage.length;

        const confirmed = await showConfirm(confirmMessage(totalCount), confirmType);
        if (confirmed) {
            if (url.includes('check-selected')) {
                isCheckLiveRunning = true;
                updateCheckLiveButtonState();
            }
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    
                    body: JSON.stringify(payload)
                });
                const result = await response.json();
                if (result.success) {
                    showToast(result.message, 'Thành công!', 'success');
                    if (url.includes('delete') || url.includes('restore')) {
                         setTimeout(() => {
                            const currentUrl = new URL(window.location);
                            currentUrl.searchParams.delete('success');
         
                                   currentUrl.searchParams.delete('error');
                            window.location.href = currentUrl.toString();
                        }, 1000);
                    }

                } else {
                    showToast(result.message || 'Có lỗi xảy ra từ server.', 'Lỗi!', 'error');
                    if (url.includes('check-selected')) {
                        isCheckLiveRunning = false;
                        updateCheckLiveButtonState();
                    }
                }
            } catch (error) {
                showToast('Lỗi kết nối hoặc phản hồi không hợp lệ.', 'Lỗi!', 'error');
                if (url.includes('check-selected')) {
                    isCheckLiveRunning = false;
                    updateCheckLiveButtonState();
                }
            }
        }
    }

    if (softDeleteSelectedBtn) {
        softDeleteSelectedBtn.addEventListener('click', () => {
             handleAction('/admin/accounts/soft-delete', (count) => `Bạn có chắc muốn chuyển ${count} account vào thùng rác?`);
        });
    }
    if (restoreSelectedBtn) {
        restoreSelectedBtn.addEventListener('click', () => {
             handleAction('/admin/accounts/restore', (count) => `Bạn có chắc muốn khôi phục ${count} account?`, 'info');
        });
    }
    if (hardDeleteSelectedBtn) {
        hardDeleteSelectedBtn.addEventListener('click', () => {
            handleAction('/admin/accounts/hard-delete', (count) => `HÀNH ĐỘNG NGUY HIỂM!\nBạn có chắc muốn XÓA VĨNH VIỄN ${count} account? Dữ liệu sẽ không thể phục hồi.`, 'danger');
        });
    }
    if (checkSelectedBtn) {
        checkSelectedBtn.addEventListener('click', () => {
             handleAction('/admin/accounts/check-selected', (count) => `Bắt đầu tiến trình check live cho ${count} account?`, 'info');
        });
    }

    const socket = io();
    socket.on('connect', () => console.log('Connected to server via WebSocket.'));
    socket.on('account:update', (data) => {
        const { id, status, lastCheckedAt, dieStreak, proxy } = data;
        const statusBadge = document.getElementById(`status-${id}`);
        const spinner = document.getElementById(`spinner-${id}`);
        const lastCheckedCell = document.getElementById(`lastChecked-${id}`);
        const dieStreakCell = document.getElementById(`dieStreak-${id}`);
        const proxyCell = document.getElementById(`proxy-cell-${id}`);

        if (!statusBadge || !spinner) return;
        
     
           const isChecking = status === 'CHECKING';
    
        spinner.style.display = isChecking ? 'inline-block' : 'none';
        statusBadge.style.display = isChecking ? 'none' : 'inline-block';
     
        if (!isChecking) {
            statusBadge.textContent = status;
            let statusClass = 'bg-gray-700 text-gray-300';
            if (status === 
 'LIVE') statusClass = 'bg-green-500/20 text-green-400';
            if (status === 'DIE' || status === 'ERROR') statusClass = 'bg-red-500/20 text-red-400';
            if (status === 'IN_USE') statusClass = 'bg-purple-500/20 text-purple-400';
            statusBadge.className = `px-2.5 py-1 text-xs font-semibold rounded-full ${statusClass}`;
        }

        if (lastCheckedCell && lastCheckedAt) {
            lastCheckedCell.textContent = lastCheckedAt;
        }
        
        if (dieStreakCell && typeof dieStreak !== 'undefined') {
            dieStreakCell.textContent = dieStreak;
            dieStreakCell.classList.toggle('text-red-400', dieStreak > 0);
            dieStreakCell.classList.toggle('text-white', dieStreak === 0 || typeof dieStreak === 'undefined');
        }
        
        if (proxyCell && typeof proxy !== 'undefined') {
            proxyCell.textContent = proxy ||
 'N/A';
        }
    });

    socket.on('account:trashed', (data) => {
        const { id, message } = data;
        const row = document.getElementById(`account-row-${id}`);
        if (row) {
            row.remove();
            showToast(message, 'Tự động xóa', 'warning');
        }
    });
    socket.on('checklive:end', () => {
        isCheckLiveRunning = false;
        updateCheckLiveButtonState();
        showToast('Tiến trình Check Live đã hoàn tất!', 'Hoàn thành', 'success');
    });
    socket.on('accounts:trash:update', (data) => {
        const trashCountSpan = document.getElementById('trash-count');
        if (trashCountSpan) {
            trashCountSpan.textContent = data.newTrashCount;
        }
    });
    toggleActionButtons();
});
</script>