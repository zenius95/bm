<%- include('partials/_header.ejs', { title: 'Account Management', page: 'accounts' }) %>

<% const inTrash = currentQuery.inTrash === 'true' %>

<main class="main-content">
    
    <% if (currentQuery.error) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>Đã xảy ra lỗi!</strong><br>
            <pre class="mb-0"><%= decodeURIComponent(currentQuery.error) %></pre>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    <% } %>
    <% if (currentQuery.success) { %>
         <div class="alert alert-success alert-dismissible fade show" role="alert">
            <strong>Thành công!</strong> <%= decodeURIComponent(currentQuery.success) %>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    <% } %>

    <h1 class="display-5 fw-bold mb-4 text-white">
        <%= inTrash ? 'Thùng rác - Account' : 'Quản Lý Account' %>
    </h1>

    <% if (!inTrash) { %>
    <div class="card mb-4">
        <div class="card-header"><h5 class="mb-0">Thêm Account Mới</h5></div>
        <div class="card-body">
            <form action="/admin/accounts/add-multiple" method="POST">
                <div class="mb-3">
                    <label for="accountsData" class="form-label">Nhập danh sách account (mỗi account một dòng)</label>
                    <textarea class="form-control font-monospace" id="accountsData" name="accountsData" rows="6" placeholder="uid|password|2fa|proxy (proxy không bắt buộc)"></textarea>
                </div>
                <button type="submit" class="btn btn-primary"><i class="ri-add-line me-1"></i> Thêm Accounts</button>
            </form>
        </div>
    </div>
    <% } %>

    <div class="card mb-4">
        <div class="card-body">
            <form method="GET" action="/admin/accounts" class="row g-3 align-items-center">
                <% if (inTrash) { %>
                    <input type="hidden" name="inTrash" value="true">
                <% } %>
                <div class="col-md-6">
                    <input type="text" name="search" class="form-control" placeholder="Tìm theo Username, Proxy..." value="<%= currentQuery.search || '' %>">
                </div>
                <div class="col-md-4">
                     <select name="status" class="form-select" onchange="this.form.submit()">
                        <option value="">-- Lọc theo trạng thái --</option>
                        <option value="UNCHECKED" <%= currentQuery.status === 'UNCHECKED' ? 'selected' : '' %>>Unchecked</option>
                        <option value="LIVE" <%= currentQuery.status === 'LIVE' ? 'selected' : '' %>>Live</option>
                        <option value="DIE" <%= currentQuery.status === 'DIE' ? 'selected' : '' %>>Die</option>
                        <option value="CHECKING" <%= currentQuery.status === 'CHECKING' ? 'selected' : '' %>>Checking</option>
                        <option value="ERROR" <%= currentQuery.status === 'ERROR' ? 'selected' : '' %>>Error</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn btn-info w-100">Lọc</button>
                </div>
            </form>
        </div>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="h4 text-white mb-0"><%= inTrash ? 'Các mục đã xóa' : 'Danh Sách Hiện Có' %> (<%= pagination.totalItems %>)</h2>
        <div>
            <% if (inTrash) { %>
                <a href="/admin/accounts" class="btn btn-light"><i class="ri-arrow-left-line me-1"></i> Quay lại danh sách</a>
                <button class="btn btn-info" id="restoreSelectedBtn" disabled><i class="ri-arrow-go-back-line me-1"></i> Khôi phục</button>
                <button class="btn btn-danger" id="hardDeleteSelectedBtn" disabled><i class="ri-delete-bin-fill me-1"></i> Xóa vĩnh viễn</button>
            <% } else { %>
                <a href="/admin/accounts?inTrash=true" class="btn btn-secondary"><i class="ri-delete-bin-line me-1"></i> Thùng rác</a>
                <button class="btn btn-primary" id="checkSelectedBtn" disabled><i class="ri-refresh-line me-1"></i> Check Live</button>
                <button class="btn btn-warning" id="softDeleteSelectedBtn" disabled><i class="ri-delete-bin-2-line me-1"></i> Bỏ vào thùng rác</button>
            <% } %>
        </div>
    </div>
    
    <div id="select-all-banner" class="alert alert-info d-none" role="alert">
        Tất cả <strong id="items-on-page-count"></strong> mục trên trang này đã được chọn.
        <a href="#" id="select-all-matching-items" class="alert-link">Chọn tất cả <%= pagination.totalItems %> mục khớp với tìm kiếm này.</a>
    </div>
    <div id="clear-selection-banner" class="alert alert-info d-none" role="alert">
        Tất cả <strong><%= pagination.totalItems %></strong> mục đã được chọn.
        <a href="#" id="clear-selection" class="alert-link">Bỏ chọn.</a>
    </div>

    <div class="card mt-3">
        <% if (accounts && accounts.length > 0) { %>
        <div class="table-responsive">
            <table class="table table-dark table-hover align-middle mb-0">
                <thead>
                    <tr>
                        <th scope="col" class="ps-4" style="width: 50px;">
                            <input class="form-check-input" type="checkbox" id="selectAllCheckbox">
                        </th>
                        <th scope="col">Username</th>
                        <th scope="col">Password</th>
                        <th scope="col">2FA</th>
                        <th scope="col">Proxy</th>
                        <th scope="col">Trạng Thái</th>
                        <th scope="col"><%= inTrash ? 'Ngày Xóa' : 'Check Lần Cuối' %></th>
                    </tr>
                </thead>
                <tbody>
                    <% accounts.forEach(account => { %>
                        <%
                            let statusClass = 'text-bg-secondary';
                            if (account.status === 'LIVE') statusClass = 'text-bg-success';
                            if (account.status === 'DIE') statusClass = 'text-bg-danger';
                            if (account.status === 'CHECKING') statusClass = 'text-bg-warning';
                            if (account.status === 'ERROR') statusClass = 'text-bg-danger';
                        %>
                        <tr id="account-row-<%= account._id %>">
                            <td class="ps-4">
                                <input class="form-check-input item-checkbox" type="checkbox" value="<%= account._id %>">
                            </td>
                            <td><%= account.uid %></td>
                            <td><%= account.password %></td>
                            <td><%= account.twofa %></td>
                            <td><%= account.proxy || 'N/A' %></td>
                            <td>
                                <% if (!inTrash) { %>
                                    <div class="spinner-border spinner-border-sm text-warning d-none" role="status" id="spinner-<%= account._id %>"></div>
                                    <span class="badge <%= statusClass %>" id="status-<%= account._id %>"><%= account.status %></span>
                                <% } else { %>
                                    <span class="badge text-bg-secondary">DELETED</span>
                                <% } %>
                            </td>
                            <td>
                                <% if (inTrash && account.deletedAt) { %>
                                    <%= new Date(account.deletedAt).toLocaleString('vi-VN') %>
                                <% } else if (!inTrash && account.lastCheckedAt) { %>
                                    <%= new Date(account.lastCheckedAt).toLocaleString('vi-VN') %>
                                <% } else if (!inTrash) { %>
                                    Chưa check
                                <% } %>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
        <% } else { %>
             <div class="card-body">
                <div class="empty-state">
                    <div class="icon mb-3"><i class="ri-group-line"></i></div>
                    <h4 class="text-white">Không tìm thấy account nào</h4>
                    <p class="text-white-50"><%= inTrash ? 'Thùng rác trống.' : 'Hãy thử thay đổi bộ lọc hoặc thêm account mới.' %></p>
                </div>
            </div>
        <% } %>
    </div>

    <% if (pagination.totalPages > 1) { %>
    <nav class="mt-4">
        <ul class="pagination justify-content-center">
             <% for(let i = 1; i <= pagination.totalPages; i++) { 
                const query = new URLSearchParams(currentQuery);
                query.set('page', i);
            %>
                <li class="page-item <%= i === pagination.currentPage ? 'active' : '' %>">
                    <a class="page-link" href="?<%= query.toString() %>"><%= i %></a>
                </li>
            <% } %>
        </ul>
    </nav>
    <% } %>
</main>

<script src="/socket.io/socket.io.js"></script>
<script>
    const selectAllCheckbox = document.getElementById('selectAllCheckbox');
    const itemCheckboxes = document.querySelectorAll('.item-checkbox');
    const softDeleteSelectedBtn = document.getElementById('softDeleteSelectedBtn');
    const checkSelectedBtn = document.getElementById('checkSelectedBtn');
    const restoreSelectedBtn = document.getElementById('restoreSelectedBtn');
    const hardDeleteSelectedBtn = document.getElementById('hardDeleteSelectedBtn');
    
    const selectAllBanner = document.getElementById('select-all-banner');
    const clearSelectionBanner = document.getElementById('clear-selection-banner');
    const selectAllMatchingItemsLink = document.getElementById('select-all-matching-items');
    const clearSelectionLink = document.getElementById('clear-selection');
    const itemsOnPageCountSpan = document.getElementById('items-on-page-count');
    
    let isSelectAllAcrossPages = false;

    function updateBanners() {
        if (!selectAllBanner) return;
        const allCheckedOnPage = itemCheckboxes.length > 0 && [...itemCheckboxes].every(cb => cb.checked);
        
        if (isSelectAllAcrossPages) {
            selectAllBanner.classList.add('d-none');
            clearSelectionBanner.classList.remove('d-none');
        } else if (allCheckedOnPage) {
            itemsOnPageCountSpan.textContent = itemCheckboxes.length;
            selectAllBanner.classList.remove('d-none');
            clearSelectionBanner.classList.add('d-none');
        } else {
            selectAllBanner.classList.add('d-none');
            clearSelectionBanner.classList.add('d-none');
        }
    }

    if(selectAllCheckbox) {
        selectAllCheckbox.addEventListener('change', (e) => {
            isSelectAllAcrossPages = false;
            itemCheckboxes.forEach(cb => cb.checked = e.target.checked);
            toggleActionButtons();
            updateBanners();
        });
    }

    itemCheckboxes.forEach(cb => {
        cb.addEventListener('change', () => {
            isSelectAllAcrossPages = false;
            toggleActionButtons();
            updateBanners();
        });
    });
    
    if (selectAllMatchingItemsLink) {
        selectAllMatchingItemsLink.addEventListener('click', (e) => {
            e.preventDefault();
            isSelectAllAcrossPages = true;
            toggleActionButtons();
            updateBanners();
        });
    }

    if(clearSelectionLink) {
        clearSelectionLink.addEventListener('click', (e) => {
            e.preventDefault();
            isSelectAllAcrossPages = false;
            if (selectAllCheckbox) selectAllCheckbox.checked = false;
            itemCheckboxes.forEach(cb => cb.checked = false);
            toggleActionButtons();
            updateBanners();
        });
    }

    function toggleActionButtons() {
        const anyChecked = [...itemCheckboxes].some(cb => cb.checked);
        const enabled = anyChecked || isSelectAllAcrossPages;
        if (checkSelectedBtn) checkSelectedBtn.disabled = !enabled;
        if (softDeleteSelectedBtn) softDeleteSelectedBtn.disabled = !enabled;
        if (restoreSelectedBtn) restoreSelectedBtn.disabled = !enabled;
        if (hardDeleteSelectedBtn) hardDeleteSelectedBtn.disabled = !enabled;
    }

    async function handleAction(url, confirmMessage) {
        let payload = {};
        if (isSelectAllAcrossPages) {
            payload = {
                selectAll: true,
                filters: <%- JSON.stringify(currentQuery) %>
            };
        } else {
            const selectedIds = [...itemCheckboxes].filter(cb => cb.checked).map(cb => cb.value);
            if (selectedIds.length === 0) return;
            payload = { ids: selectedIds };
        }

        const totalCount = isSelectAllAcrossPages ? <%= pagination.totalItems %> : payload.ids.length;

        if (confirm(confirmMessage(totalCount))) {
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();
                
                const queryParams = new URLSearchParams(window.location.search);
                if (result.success) {
                    queryParams.set('success', encodeURIComponent(result.message));
                    queryParams.delete('error');
                } else {
                    queryParams.set('error', encodeURIComponent(result.message));
                    queryParams.delete('success');
                }
                window.location.search = queryParams.toString();

            } catch (error) {
                alert('Đã có lỗi xảy ra.');
            }
        }
    }

    if (softDeleteSelectedBtn) {
        softDeleteSelectedBtn.addEventListener('click', () => {
             handleAction('/admin/accounts/soft-delete', (count) => `Bạn có chắc muốn chuyển ${count} account vào thùng rác?`);
        });
    }

    if (restoreSelectedBtn) {
        restoreSelectedBtn.addEventListener('click', () => {
             handleAction('/admin/accounts/restore', (count) => `Bạn có chắc muốn khôi phục ${count} account?`);
        });
    }

    if (hardDeleteSelectedBtn) {
        hardDeleteSelectedBtn.addEventListener('click', () => {
            handleAction('/admin/accounts/hard-delete', (count) => `HÀNH ĐỘNG NGUY HIỂM!\nBạn có chắc muốn XÓA VĨNH VIỄN ${count} account? Dữ liệu sẽ không thể phục hồi.`);
        });
    }
    
    if (checkSelectedBtn) {
        checkSelectedBtn.addEventListener('click', async () => {
            let payload = {};
            if (isSelectAllAcrossPages) {
                 payload = {
                    selectAll: true,
                    filters: <%- JSON.stringify(currentQuery) %>
                };
            } else {
                const selectedIds = [...itemCheckboxes].filter(cb => cb.checked).map(cb => cb.value);
                if (selectedIds.length === 0) return;
                payload = { ids: selectedIds };
            }

            checkSelectedBtn.disabled = true;
            checkSelectedBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Sending...';
            try {
                const response = await fetch('/admin/accounts/check-selected', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();
                if (!result.success) alert(`Lỗi: ${result.message}`);
            } catch (error) {
                alert('Đã có lỗi xảy ra khi bắt đầu tiến trình check.');
            } finally {
                checkSelectedBtn.disabled = false;
                checkSelectedBtn.innerHTML = '<i class="ri-refresh-line me-1"></i> Check Live';
            }
        });
    }

    // --- LOGIC REAL-TIME BẰNG SOCKET.IO ---
    const socket = io();
    socket.on('connect', () => console.log('Connected to server via WebSocket.'));
    socket.on('account:update', (data) => {
        const { id, status, lastCheckedAt } = data;
        const statusBadge = document.getElementById(`status-${id}`);
        const spinner = document.getElementById(`spinner-${id}`);
        const lastCheckedCell = document.getElementById(`lastChecked-${id}`);

        if (!statusBadge || !spinner || !lastCheckedCell) return;

        spinner.classList.toggle('d-none', status !== 'CHECKING');
        statusBadge.classList.toggle('d-none', status === 'CHECKING');

        statusBadge.innerText = status;
        let statusClass = 'text-bg-secondary';
        if (status === 'LIVE') statusClass = 'text-bg-success';
        if (status === 'DIE' || status === 'ERROR') statusClass = 'text-bg-danger';
        statusBadge.className = `badge ${statusClass}`;

        if (lastCheckedAt) {
            lastCheckedCell.innerText = lastCheckedAt;
        }
    });
</script>

<%- include('partials/_footer.ejs') %>